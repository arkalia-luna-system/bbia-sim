"""Application FastAPI principale pour BBIA-SIM."""

import logging
from contextlib import asynccontextmanager
from typing import Any

from fastapi import Depends, FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer

from ..config import settings
from ..middleware import RateLimitMiddleware, SecurityMiddleware
from ..simulation_service import simulation_service
from ..ws import telemetry
from .routers import motion, state

# Configuration du logging
logging.basicConfig(
    level=getattr(logging, settings.log_level.upper()),
    format=settings.log_format,
)
logger = logging.getLogger(__name__)

# Configuration de s√©curit√©
security = HTTPBearer()

# Variables globales pour l'√©tat de l'application
app_state: dict[str, Any] = {
    "simulator": None,
    "is_running": False,
    "robot_state": {
        "position": {"x": 0, "y": 0, "z": 0},
        "status": "ready",
        "battery": 85.5,
        "temperature": 25.5,
    },
}


def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)) -> str:
    """V√©rifie le token d'authentification.

    Args:
        credentials: Credentials HTTP Bearer

    Returns:
        Token v√©rifi√©

    Raises:
        HTTPException: Si le token est invalide
    """
    if credentials.credentials != settings.api_token:
        # Log s√©curis√© sans exposer le token
        logger.warning(
            f"Tentative d'authentification avec token invalide: {settings.mask_token(credentials.credentials)}"
        )
        raise HTTPException(
            status_code=401,
            detail="Token d'authentification invalide",
            headers={"WWW-Authenticate": "Bearer"},
        )

    # Log de succ√®s en mode debug uniquement
    if settings.log_level.upper() == "DEBUG":
        logger.debug(
            f"Authentification r√©ussie avec token: {settings.mask_token(credentials.credentials)}"
        )

    return credentials.credentials


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestionnaire de cycle de vie de l'application."""
    # D√©marrage
    logger.info("üöÄ D√©marrage de l'API BBIA-SIM")

    # D√©marrage de la simulation MuJoCo
    sim_config = settings.get_simulation_config()
    success = await simulation_service.start_simulation(headless=sim_config["headless"])

    if success:
        logger.info("‚úÖ Simulation MuJoCo d√©marr√©e avec succ√®s")
        app_state["simulator"] = simulation_service
        app_state["is_running"] = True
    else:
        logger.warning("‚ö†Ô∏è √âchec du d√©marrage de la simulation MuJoCo")
        app_state["simulator"] = None
        app_state["is_running"] = False

    yield

    # Arr√™t
    logger.info("üõë Arr√™t de l'API BBIA-SIM")

    # Arr√™t de la simulation
    if app_state["simulator"]:
        await simulation_service.stop_simulation()
        app_state["simulator"] = None
        app_state["is_running"] = False


# Cr√©ation de l'application FastAPI
app = FastAPI(
    title=settings.api_title,
    description=settings.api_description,
    version=settings.api_version,
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan,
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.get_cors_origins(),
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# Middleware de s√©curit√©
app.add_middleware(SecurityMiddleware)

# Rate limiting (en production uniquement)
if settings.is_production():
    app.add_middleware(
        RateLimitMiddleware, requests_per_minute=settings.rate_limit_requests
    )

# Inclusion des routers
app.include_router(
    state.router,
    prefix="/api/state",
    tags=["state"],
    dependencies=[Depends(verify_token)],
)

app.include_router(
    motion.router,
    prefix="/api/motion",
    tags=["motion"],
    dependencies=[Depends(verify_token)],
)

app.include_router(telemetry.router, prefix="/ws", tags=["telemetry"])


@app.get("/", response_class=JSONResponse)
async def root() -> dict[str, Any]:
    """Point d'entr√©e principal de l'API."""
    return {
        "message": "BBIA-SIM API",
        "version": "1.0.0",
        "status": "running",
        "endpoints": {
            "state": "/api/state",
            "motion": "/api/motion",
            "telemetry": "/ws/telemetry",
            "docs": "/docs",
        },
    }


@app.get("/health", response_class=JSONResponse)
async def health_check() -> dict[str, Any]:
    """V√©rification de l'√©tat de sant√© de l'API."""
    return {
        "status": "healthy",
        "timestamp": "2025-10-22T14:42:00Z",
        "services": {
            "api": "running",
            "simulator": "available" if app_state["simulator"] else "unavailable",
            "robot": "ready",
        },
    }


@app.get("/api/info", response_class=JSONResponse)
async def api_info() -> dict[str, Any]:
    """Informations d√©taill√©es sur l'API."""
    return {
        "name": "BBIA-SIM API",
        "version": "1.0.0",
        "description": "API pour le contr√¥le du robot Reachy Mini",
        "features": [
            "REST API",
            "WebSocket telemetry",
            "MuJoCo simulation",
            "Robot control",
            "Authentication",
        ],
        "robot": {"model": "Reachy Mini", "joints": 8, "status": "ready"},
    }


# Gestionnaire d'erreurs global
@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc: HTTPException):
    """Gestionnaire d'erreurs HTTP personnalis√©."""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": exc.detail,
            "status_code": exc.status_code,
            "path": str(request.url),
        },
    )


@app.exception_handler(Exception)
async def general_exception_handler(request, exc: Exception):
    """Gestionnaire d'erreurs g√©n√©rales."""
    logger.error(f"Erreur non g√©r√©e : {exc}")
    return JSONResponse(
        status_code=500,
        content={
            "error": "Erreur interne du serveur",
            "status_code": 500,
            "path": str(request.url),
        },
    )


if __name__ == "__main__":
    import uvicorn

    # Configuration pour le d√©veloppement
    uvicorn.run("main:app", host="127.0.0.1", port=8000, reload=True, log_level="info")
