"""Application FastAPI principale pour BBIA-SIM."""

import logging
from collections.abc import AsyncIterator
from contextlib import asynccontextmanager
from pathlib import Path
from typing import Any

from fastapi import APIRouter, Depends, FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

from ..config import settings
from ..middleware import RateLimitMiddleware, SecurityMiddleware
from ..simulation_service import simulation_service
from ..ws import telemetry
from .routers import apps, daemon, ecosystem, kinematics, motion, motors, move, state

# Configuration du logging
logging.basicConfig(
    level=getattr(logging, settings.log_level.upper()),
    format=settings.log_format,
)
logger = logging.getLogger(__name__)

# Configuration de s√©curit√©
security = HTTPBearer()

# Variables globales pour l'√©tat de l'application
app_state: dict[str, Any] = {
    "simulator": None,
    "is_running": False,
    "robot_state": {
        "position": {"x": 0, "y": 0, "z": 0},
        "status": "ready",
        "battery": 85.5,
        "temperature": 25.5,
    },
}


def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)) -> str:
    """V√©rifie le token d'authentification.

    Args:
        credentials: Credentials HTTP Bearer

    Returns:
        Token v√©rifi√©

    Raises:
        HTTPException: Si le token est invalide

    """
    if credentials.credentials != settings.api_token:
        # Log s√©curis√© sans exposer le token
        logger.warning(
            f"Tentative d'authentification avec token invalide: {settings.mask_token(credentials.credentials)}"
        )
        raise HTTPException(
            status_code=401,
            detail="Token d'authentification invalide",
            headers={"WWW-Authenticate": "Bearer"},
        )

    # Log de succ√®s en mode debug uniquement
    if settings.log_level.upper() == "DEBUG":
        logger.debug(
            f"Authentification r√©ussie avec token: {settings.mask_token(credentials.credentials)}"
        )

    return str(credentials.credentials)


@asynccontextmanager
async def lifespan(app: FastAPI) -> AsyncIterator[None]:
    """Gestionnaire de cycle de vie de l'application."""
    # D√©marrage
    logger.info("üöÄ D√©marrage de l'API BBIA-SIM")

    # D√©marrage de la simulation MuJoCo
    sim_config = settings.get_simulation_config()
    success = await simulation_service.start_simulation(headless=sim_config["headless"])

    if success:
        logger.info("‚úÖ Simulation MuJoCo d√©marr√©e avec succ√®s")
        app_state["simulator"] = simulation_service
        app_state["is_running"] = True
    else:
        logger.warning("‚ö†Ô∏è √âchec du d√©marrage de la simulation MuJoCo")
        app_state["simulator"] = None
        app_state["is_running"] = False

    yield

    # Arr√™t
    logger.info("üõë Arr√™t de l'API BBIA-SIM")

    # Arr√™t de la simulation
    if app_state["simulator"]:
        await simulation_service.stop_simulation()
        app_state["simulator"] = None
        app_state["is_running"] = False


# Cr√©ation de l'application FastAPI
app = FastAPI(
    title="BBIA-SIM API - √âcosyst√®me Reachy Mini",
    description="""
    ## üöÄ API BBIA-SIM v1.2.0 - √âcosyst√®me Reachy Mini

    **API publique pour le contr√¥le du robot Reachy Mini avec modules BBIA (Bio-Inspired Artificial Intelligence)**

    ### üéØ Fonctionnalit√©s Principales

    - **ü§ñ Contr√¥le Robot** : Mouvements, poses, √©tats
    - **üòä √âmotions BBIA** : 12 √©motions contr√¥lant les articulations
    - **üé≠ Comportements** : Actions complexes pr√©d√©finies
    - **üìä T√©l√©m√©trie** : WebSocket temps r√©el
    - **üéÆ Modes D√©mo** : Simulation, robot r√©el, mixte

    ### üîß Backends Support√©s

    - **MuJoCo** : Simulation physique r√©aliste
    - **Reachy Mini SDK** : Robot physique officiel
    - **Reachy Mock** : Mode d√©veloppement

    ### üìö Documentation

    - **Swagger UI** : Interface interactive `/docs`
    - **ReDoc** : Documentation alternative `/redoc`
    - **OpenAPI** : Sp√©cification compl√®te `/openapi.json`

    ### üîê Authentification

    Utilisez le token Bearer dans l'en-t√™te Authorization :
    ```
    Authorization: Bearer YOUR_API_TOKEN
    ```

    ### üåê WebSocket

    Connexion temps r√©el pour la t√©l√©m√©trie :
    ```
    ws://localhost:8000/ws/telemetry
    ```
    """,
    version="1.2.0",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
    lifespan=lifespan,
    contact={
        "name": "Arkalia Luna System",
        "email": "arkalia.luna.system@gmail.com",
        "url": "https://github.com/arkalia-luna-system/bbia-sim",
    },
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT",
    },
    servers=[
        {
            "url": "http://localhost:8000",
            "description": "Serveur de d√©veloppement local",
        },
        {
            "url": "https://api.bbia-sim.com",
            "description": "Serveur de production (√† venir)",
        },
    ],
    tags_metadata=[
        {
            "name": "ecosystem",
            "description": (
                "**üåê √âcosyst√®me BBIA-SIM** - Endpoints publics pour l'int√©gration et la d√©monstration"
            ),
            "externalDocs": {
                "description": "Documentation compl√®te",
                "url": "https://github.com/arkalia-luna-system/bbia-sim#readme",
            },
        },
        {
            "name": "motion",
            "description": (
                "**ü§ñ Contr√¥le des Mouvements** - Gestion des poses et mouvements du robot"
            ),
        },
        {
            "name": "state",
            "description": (
                "**üìä √âtat du Robot** - Informations sur l'√©tat, la batterie, les capteurs"
            ),
        },
        {
            "name": "telemetry",
            "description": "**üì° T√©l√©m√©trie** - WebSocket pour les donn√©es temps r√©el",
        },
    ],
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.get_cors_origins(),
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# Middleware de s√©curit√©
app.add_middleware(SecurityMiddleware)

# Rate limiting (en production uniquement)
if settings.is_production():
    app.add_middleware(
        RateLimitMiddleware, requests_per_minute=settings.rate_limit_requests
    )

# Inclusion des routers (conforme SDK officiel: router parent /api avec sous-routers)
# Note: Les WebSockets ne peuvent pas utiliser HTTPBearer, donc on s√©pare les routers
api_router = APIRouter(prefix="/api")

# Routers avec authentification HTTP (sans WebSockets)
api_router_http = APIRouter(prefix="/api")
api_router_http.include_router(state.router)
api_router_http.include_router(motors.router)
api_router_http.include_router(daemon.router)
api_router_http.include_router(kinematics.router)
api_router_http.include_router(apps.router)
app.include_router(api_router_http, dependencies=[Depends(verify_token)])

# Router move avec endpoints HTTP + WebSockets (WebSockets sans auth, HTTP avec auth)
# On doit g√©rer manuellement l'auth pour les endpoints HTTP dans move.py
move_router = APIRouter(prefix="/api/move")
move_router.include_router(move.router)
app.include_router(move_router)  # Sans d√©pendance globale (gestion manuelle dans move.py)

# Routers BBIA suppl√©mentaires (extensions l√©gitimes)
app.include_router(
    ecosystem.router,
    prefix="/api/ecosystem",
    tags=["ecosystem"],
)
app.include_router(
    motion.router,
    prefix="/api/motion",
    tags=["motion"],
    dependencies=[Depends(verify_token)],
)
app.include_router(telemetry.router, prefix="/ws", tags=["telemetry"])

# Dashboard (conforme SDK officiel)
STATIC_DIR = Path(__file__).parent / "dashboard" / "static"
TEMPLATES_DIR = Path(__file__).parent / "dashboard" / "templates"

if STATIC_DIR.exists() and TEMPLATES_DIR.exists():
    app.mount("/static", StaticFiles(directory=STATIC_DIR), name="static")
    templates = Jinja2Templates(directory=str(TEMPLATES_DIR))

    @app.get("/", response_class=HTMLResponse)
    async def dashboard(request: Request) -> HTMLResponse:
        """Render the dashboard (conforme SDK officiel)."""
        return templates.TemplateResponse("index.html", {"request": request})

else:
    logger.warning(
        "Dashboard templates non trouv√©s. Dashboard non disponible. "
        f"STATIC_DIR: {STATIC_DIR}, TEMPLATES_DIR: {TEMPLATES_DIR}"
    )

    @app.get("/", response_class=JSONResponse)
    async def root() -> dict[str, Any]:
        """Point d'entr√©e principal de l'API (fallback si dashboard non disponible)."""
        return {
            "message": "BBIA-SIM API - √âcosyst√®me Reachy Mini",
            "version": "1.2.0",
            "status": "running",
            "description": (
                "API publique pour le contr√¥le du robot Reachy Mini avec modules BBIA"
            ),
            "endpoints": {
                "ecosystem": "/api/ecosystem",
                "state": "/api/state",
                "motion": "/api/motion",
                "move": "/api/move",
                "motors": "/api/motors",
                "daemon": "/api/daemon",
                "kinematics": "/api/kinematics",
                "apps": "/api/apps",
                "telemetry": "/ws/telemetry",
                "docs": "/docs",
                "redoc": "/redoc",
                "openapi": "/openapi.json",
            },
            "features": [
                "REST API",
                "WebSocket telemetry",
                "MuJoCo simulation",
                "Robot control",
                "BBIA emotions",
                "BBIA behaviors",
                "Demo modes",
                "OpenAPI documentation",
            ],
            "contact": {
                "name": "Arkalia Luna System",
                "email": "arkalia.luna.system@gmail.com",
                "github": "https://github.com/arkalia-luna-system/bbia-sim",
            },
        }


@app.get("/health", response_class=JSONResponse)
async def health_check() -> dict[str, Any]:
    """V√©rification de l'√©tat de sant√© de l'API."""
    return {
        "status": "healthy",
        "timestamp": "2025-10-22T14:42:00Z",
        "services": {
            "api": "running",
            "simulator": "available" if app_state["simulator"] else "unavailable",
            "robot": "ready",
        },
    }


@app.get("/api/info", response_class=JSONResponse)
async def api_info() -> dict[str, Any]:
    """Informations d√©taill√©es sur l'API."""
    return {
        "name": "BBIA-SIM API - √âcosyst√®me Reachy Mini",
        "version": "1.2.0",
        "description": (
            "API publique pour le contr√¥le du robot Reachy Mini avec modules BBIA"
        ),
        "phase": "Phase 3 - Ouverture √âcosyst√®me",
        "features": [
            "REST API",
            "WebSocket telemetry",
            "MuJoCo simulation",
            "Robot control",
            "BBIA emotions (12 √©motions)",
            "BBIA behaviors (8 comportements)",
            "Demo modes (simulation, robot r√©el, mixte)",
            "OpenAPI documentation",
            "Authentication",
            "Rate limiting",
            "CORS support",
        ],
        "robot": {
            "model": "Reachy Mini Wireless",
            "joints": 16,
            "status": "ready",
            "backends": ["mujoco", "reachy_mini", "reachy"],
        },
        "bbia_modules": {
            "emotions": 12,
            "behaviors": 8,
            "vision": "YOLOv8n + MediaPipe",
            "audio": "Whisper STT + pyttsx3 TTS",
            "integration": "Complete",
        },
        "documentation": {
            "swagger": "/docs",
            "redoc": "/redoc",
            "openapi": "/openapi.json",
            "github": "https://github.com/arkalia-luna-system/bbia-sim",
        },
    }


# Gestionnaire d'erreurs global
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException) -> JSONResponse:
    """Gestionnaire d'erreurs HTTP personnalis√©."""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": exc.detail,
            "status_code": exc.status_code,
            "path": str(request.url),
        },
    )


@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception) -> JSONResponse:
    """Gestionnaire d'erreurs g√©n√©rales."""
    logger.error(f"Erreur non g√©r√©e : {exc}")
    return JSONResponse(
        status_code=500,
        content={
            "error": "Erreur interne du serveur",
            "status_code": 500,
            "path": str(request.url),
        },
    )


if __name__ == "__main__":
    import uvicorn

    # Configuration pour le d√©veloppement
    # Utiliser string d'import compl√®te pour √©viter probl√®mes
    uvicorn.run(
        "bbia_sim.daemon.app.main:app",
        host="127.0.0.1",
        port=8000,
        reload=False,  # D√©sactiver reload pour stabilit√©
        log_level="info",
    )
