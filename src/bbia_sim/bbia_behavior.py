#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
BBIA Behavior Manager - Module de gestion des comportements pour Reachy Mini Wireless
Comportements personnalis√©s, r√©actions automatiques, int√©gration avec les √©motions
"""

import time
import random
import threading
from typing import Dict, List, Optional, Callable, Any
from datetime import datetime
from queue import Queue

try:
    from .bbia_emotions import BBIAEmotions
    from .bbia_vision import BBIAVision
    from .bbia_voice import dire_texte, reconnaitre_parole
    from .bbia_audio import enregistrer_audio, lire_audio
except ImportError:
    # Pour les tests directs
    from bbia_emotions import BBIAEmotions
    from bbia_vision import BBIAVision
    from bbia_voice import dire_texte, reconnaitre_parole
    from bbia_audio import enregistrer_audio, lire_audio


class BBIABehavior:
    """Comportement de base pour BBIA"""

    def __init__(self, name: str, description: str):
        self.name = name
        self.description = description
        self.is_active = False
        self.priority = 1  # 1-10, 10 √©tant le plus prioritaire

    def can_execute(self, context: Dict[str, Any]) -> bool:
        """V√©rifie si le comportement peut √™tre ex√©cut√©"""
        return True

    def execute(self, context: Dict[str, Any]) -> bool:
        """Ex√©cute le comportement"""
        print(f"üé≠ Ex√©cution du comportement : {self.name}")
        return True

    def stop(self):
        """Arr√™te le comportement"""
        self.is_active = False


class WakeUpBehavior(BBIABehavior):
    """Comportement de r√©veil de BBIA"""

    def __init__(self):
        super().__init__("wake_up", "S√©quence de r√©veil compl√®te de BBIA")
        self.priority = 10

    def execute(self, context: Dict[str, Any]) -> bool:
        print("\n‚ú® [BBIA] S√©quence de r√©veil...")

        # 1. Initialisation
        print("üí° Lumi√®re blanche faible...")
        time.sleep(1)

        # 2. Intensification
        print("üí° Lumi√®re qui s'intensifie doucement...")
        time.sleep(1)

        # 3. Halo bleu
        print("üíô Halo bleu : BBIA s'√©veille.")
        time.sleep(1)

        # 4. Respiration simul√©e
        print("ü´ß Respiration simul√©e : inspiration...")
        time.sleep(1)
        print("ü´ß Respiration simul√©e : expiration...")
        time.sleep(1)

        # 5. Son de d√©marrage
        print("üîä L√©ger son de d√©marrage...")
        time.sleep(1)

        # 6. Mouvements de t√™te
        print("ü§ñ Mouvements de t√™te lents...")
        time.sleep(2)

        # 7. Expression
        print("üòä Expression : sourire doux.")
        time.sleep(1)

        # 8. Premi√®re parole
        print("üó£Ô∏è Premi√®re pens√©e : 'Je suis l√†, Athalia.'")
        dire_texte("Je suis l√†, Athalia.")

        print("‚ú® BBIA est compl√®tement r√©veill√© et pr√™t !\n")
        return True


class GreetingBehavior(BBIABehavior):
    """Comportement de salutation"""

    def __init__(self):
        super().__init__("greeting", "Salutation personnalis√©e")
        self.greetings = [
            "Bonjour ! Comment allez-vous ?",
            "Salut ! Ravi de vous voir !",
            "Hello ! Belle journ√©e, n'est-ce pas ?",
            "Bonjour ! Je suis BBIA, enchant√© !",
        ]

    def execute(self, context: Dict[str, Any]) -> bool:
        greeting = random.choice(self.greetings)
        print(f"üëã {greeting}")
        dire_texte(greeting)
        return True


class EmotionalResponseBehavior(BBIABehavior):
    """Comportement de r√©ponse √©motionnelle"""

    def __init__(self, emotions: BBIAEmotions):
        super().__init__("emotional_response", "R√©ponse √©motionnelle automatique")
        self.emotions = emotions
        self.priority = 8

    def execute(self, context: Dict[str, Any]) -> bool:
        stimulus = context.get("stimulus", "")
        if stimulus:
            emotion = self.emotions.emotional_response(stimulus)
            print(f"üé≠ R√©ponse √©motionnelle : {emotion}")
            return True
        return False


class VisionTrackingBehavior(BBIABehavior):
    """Comportement de suivi visuel"""

    def __init__(self, vision: BBIAVision):
        super().__init__("vision_tracking", "Suivi visuel d'objets")
        self.vision = vision
        self.priority = 6

    def execute(self, context: Dict[str, Any]) -> bool:
        print("üëÅÔ∏è Activation du suivi visuel...")

        # Scan de l'environnement
        result = self.vision.scan_environment()

        # Suivi du premier objet d√©tect√©
        if result["objects"]:
            first_object = result["objects"][0]
            print(f"üéØ Suivi de l'objet : {first_object['name']}")
            self.vision.track_object(first_object["name"])
            return True

        return False


class ConversationBehavior(BBIABehavior):
    """Comportement de conversation"""

    def __init__(self):
        super().__init__("conversation", "Conversation interactive")
        self.priority = 7

    def execute(self, context: Dict[str, Any]) -> bool:
        print("üó£Ô∏è Mode conversation activ√©...")
        dire_texte("Je vous √©coute.")

        # √âcoute pendant 5 secondes
        texte = reconnaitre_parole(duree=5)

        if texte:
            print(f"üë§ Vous avez dit : {texte}")
            dire_texte(f"J'ai entendu : {texte}")

            # R√©ponse simple bas√©e sur le contenu
            if "bonjour" in texte.lower():
                dire_texte("Bonjour √† vous aussi !")
            elif "comment" in texte.lower():
                dire_texte("Je vais tr√®s bien, merci !")
            elif "au revoir" in texte.lower():
                dire_texte("Au revoir ! √Ä bient√¥t !")
            else:
                dire_texte("C'est int√©ressant, dites-moi en plus.")
        else:
            dire_texte("Je n'ai rien entendu. Pouvez-vous r√©p√©ter ?")

        return True


class AntennaAnimationBehavior(BBIABehavior):
    """Comportement d'animation des antennes"""

    def __init__(self):
        super().__init__("antenna_animation", "Animation des antennes selon l'√©motion")
        self.priority = 5

    def execute(self, context: Dict[str, Any]) -> bool:
        emotion = context.get("emotion", "neutral")

        animations = {
            "happy": "üì° Antennes l√©g√®rement relev√©es et vibrantes",
            "sad": "üì° Antennes tombantes et immobiles",
            "angry": "üì° Antennes rigides et dress√©es",
            "curious": "üì° Antennes fr√©missantes et orient√©es",
            "excited": "üì° Antennes tr√®s vibrantes et anim√©es",
            "neutral": "üì° Antennes droites et calmes",
        }

        animation = animations.get(emotion, animations["neutral"])
        print(animation)
        time.sleep(2)
        return True


class BBIABehaviorManager:
    """Gestionnaire de comportements pour BBIA"""

    def __init__(self):
        self.behaviors: Dict[str, BBIABehavior] = {}
        self.active_behaviors: List[str] = []
        self.behavior_queue = Queue()
        self.is_running = False
        self.worker_thread = None

        # Initialiser les modules BBIA
        self.emotions = BBIAEmotions()
        self.vision = BBIAVision()

        # Enregistrer les comportements par d√©faut
        self._register_default_behaviors()

        print("üé≠ BBIA Behavior Manager initialis√©")
        print(f"   ‚Ä¢ Comportements disponibles : {len(self.behaviors)}")

    def _register_default_behaviors(self):
        """Enregistre les comportements par d√©faut"""
        self.register_behavior(WakeUpBehavior())
        self.register_behavior(GreetingBehavior())
        self.register_behavior(EmotionalResponseBehavior(self.emotions))
        self.register_behavior(VisionTrackingBehavior(self.vision))
        self.register_behavior(ConversationBehavior())
        self.register_behavior(AntennaAnimationBehavior())

    def register_behavior(self, behavior: BBIABehavior):
        """Enregistre un nouveau comportement"""
        self.behaviors[behavior.name] = behavior
        print(f"‚úÖ Comportement enregistr√© : {behavior.name}")

    def execute_behavior(
        self, behavior_name: str, context: Optional[Dict[str, Any]] = None
    ) -> bool:
        """Ex√©cute un comportement sp√©cifique"""
        if behavior_name not in self.behaviors:
            print(f"‚ùå Comportement inconnu : {behavior_name}")
            return False

        behavior = self.behaviors[behavior_name]
        context = context or {}

        if behavior.can_execute(context):
            return behavior.execute(context)
        else:
            print(f"‚ùå Comportement {behavior_name} ne peut pas √™tre ex√©cut√©")
            return False

    def add_to_queue(
        self, behavior_name: str, context: Optional[Dict[str, Any]] = None
    ):
        """Ajoute un comportement √† la queue d'ex√©cution"""
        self.behavior_queue.put((behavior_name, context or {}))

    def start_behavior_worker(self):
        """D√©marre le worker de comportements"""
        if self.is_running:
            return

        self.is_running = True
        self.worker_thread = threading.Thread(target=self._behavior_worker, daemon=True)
        self.worker_thread.start()
        print("üé≠ Worker de comportements d√©marr√©")

    def stop_behavior_worker(self):
        """Arr√™te le worker de comportements"""
        self.is_running = False
        if self.worker_thread:
            self.worker_thread.join()
        print("üé≠ Worker de comportements arr√™t√©")

    def _behavior_worker(self):
        """Worker qui traite la queue de comportements"""
        while self.is_running:
            try:
                if not self.behavior_queue.empty():
                    behavior_name, context = self.behavior_queue.get(timeout=1)
                    self.execute_behavior(behavior_name, context)
                else:
                    time.sleep(0.1)
            except Exception as e:
                print(f"‚ùå Erreur dans le worker de comportements : {e}")

    def get_available_behaviors(self) -> List[Dict[str, Any]]:
        """Retourne la liste des comportements disponibles"""
        return [
            {
                "name": behavior.name,
                "description": behavior.description,
                "priority": behavior.priority,
                "is_active": behavior.is_active,
            }
            for behavior in self.behaviors.values()
        ]

    def get_behavior_stats(self) -> Dict[str, Any]:
        """Retourne les statistiques des comportements"""
        return {
            "total_behaviors": len(self.behaviors),
            "active_behaviors": len(self.active_behaviors),
            "queue_size": self.behavior_queue.qsize(),
            "worker_running": self.is_running,
            "available_behaviors": self.get_available_behaviors(),
        }


def main():
    """Test du module BBIA Behavior Manager"""
    print("üß™ Test du module BBIA Behavior Manager")
    print("=" * 50)

    # Cr√©er l'instance
    manager = BBIABehaviorManager()

    # Test 1 : Comportement de r√©veil
    print("\n1Ô∏è‚É£ Test comportement de r√©veil")
    manager.execute_behavior("wake_up")

    # Test 2 : Salutation
    print("\n2Ô∏è‚É£ Test comportement de salutation")
    manager.execute_behavior("greeting")

    # Test 3 : Animation des antennes
    print("\n3Ô∏è‚É£ Test animation des antennes")
    context = {"emotion": "happy"}
    manager.execute_behavior("antenna_animation", context)

    # Test 4 : R√©ponse √©motionnelle
    print("\n4Ô∏è‚É£ Test r√©ponse √©motionnelle")
    context = {"stimulus": "compliment"}
    manager.execute_behavior("emotional_response", context)

    # Test 5 : Suivi visuel
    print("\n5Ô∏è‚É£ Test suivi visuel")
    manager.execute_behavior("vision_tracking")

    # Test 6 : Statistiques
    print("\n6Ô∏è‚É£ Test statistiques")
    stats = manager.get_behavior_stats()
    print(f"Statistiques : {stats}")

    print("\n‚úÖ Test BBIA Behavior Manager termin√©")


if __name__ == "__main__":
    main()
