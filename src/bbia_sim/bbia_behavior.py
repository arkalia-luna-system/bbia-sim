#!/usr/bin/env python3

"""BBIA Behavior Manager - Module de gestion des comportements pour Reachy Mini Wireless
Comportements personnalis√©s, r√©actions automatiques, int√©gration avec les √©motions.
"""

import logging
import os
import secrets
import threading
import time
from queue import Queue
from typing import Any, Optional

try:
    from .bbia_emotions import BBIAEmotions
    from .bbia_vision import BBIAVision
    from .bbia_voice import dire_texte, reconnaitre_parole
except ImportError:
    # Pour les tests directs
    pass

# Cr√©ation du dossier logs si besoin
os.makedirs("logs", exist_ok=True)
# Logger BBIA strictement comme le test minimal

logger = logging.getLogger("BBIA")
# Supprime tous les handlers existants
for h in list(logger.handlers):
    logger.removeHandler(h)
handler = logging.FileHandler("logs/bbia.log", mode="a", encoding="utf-8")
formatter = logging.Formatter("%(asctime)s | %(levelname)s | %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.setLevel(logging.INFO)
logger.info("--- Initialisation du logger BBIA ---")


class BBIABehavior:
    """Comportement de base pour BBIA."""

    def __init__(self, name: str, description: str):
        self.name = name
        self.description = description
        self.is_active = False
        self.priority = 1  # 1-10, 10 √©tant le plus prioritaire

    def can_execute(self, context: dict[str, Any]) -> bool:
        logger.info(f"V√©rification d'ex√©cution du comportement : {self.name}")
        """V√©rifie si le comportement peut √™tre ex√©cut√©"""
        return True

    def execute(self, context: dict[str, Any]) -> bool:
        logger.info(f"Ex√©cution du comportement : {self.name}")
        """Ex√©cute le comportement"""
        return True

    def stop(self):
        logger.info(f"Arr√™t du comportement : {self.name}")
        """Arr√™te le comportement"""
        self.is_active = False


class WakeUpBehavior(BBIABehavior):
    """Comportement de r√©veil de BBIA."""

    def __init__(self):
        super().__init__("wake_up", "S√©quence de r√©veil compl√®te de BBIA")
        self.priority = 10

    def execute(self, context: dict[str, Any]) -> bool:
        logger.info("D√©but de la s√©quence de r√©veil BBIA")

        logger.info("√âtape : Lumi√®re blanche faible")
        time.sleep(1)

        logger.info("√âtape : Lumi√®re qui s'intensifie doucement")
        time.sleep(1)

        logger.info("√âtape : Halo bleu d'√©veil")
        time.sleep(1)

        logger.info("√âtape : Respiration simul√©e (inspiration)")
        time.sleep(1)
        logger.info("√âtape : Respiration simul√©e (expiration)")
        time.sleep(1)

        logger.info("√âtape : Son de d√©marrage")
        time.sleep(1)

        logger.info("√âtape : Mouvements de t√™te lents")
        time.sleep(2)

        logger.info("√âtape : Expression sourire doux")
        time.sleep(1)

        logger.info("√âtape : Premi√®re parole d'√©veil")
        dire_texte("Je suis l√†, Athalia.")
        logger.info("Synth√®se vocale : Je suis l√†, Athalia.")

        logger.info("Fin de la s√©quence de r√©veil BBIA")
        return True


class GreetingBehavior(BBIABehavior):
    """Comportement de salutation."""

    def __init__(self):
        super().__init__("greeting", "Salutation personnalis√©e")
        self.greetings = [
            "Bonjour ! Comment allez-vous ?",
            "Salut ! Ravi de vous voir !",
            "Hello ! Belle journ√©e, n'est-ce pas ?",
            "Bonjour ! Je suis BBIA, enchant√© !",
        ]

    def execute(self, context: dict[str, Any]) -> bool:
        greeting = secrets.choice(self.greetings)
        logger.info(f"Salutation choisie : {greeting}")
        dire_texte(greeting)
        logger.info(f"Synth√®se vocale : {greeting}")
        return True


class EmotionalResponseBehavior(BBIABehavior):
    """Comportement de r√©ponse √©motionnelle."""

    def __init__(self, emotions: BBIAEmotions):
        super().__init__("emotional_response", "R√©ponse √©motionnelle automatique")
        self.emotions = emotions
        self.priority = 8

    def execute(self, context: dict[str, Any]) -> bool:
        stimulus = context.get("stimulus", "")
        logger.info(f"Stimulus re√ßu pour r√©ponse √©motionnelle : {stimulus}")
        if stimulus:
            emotion = self.emotions.emotional_response(stimulus)
            logger.info(f"R√©ponse √©motionnelle g√©n√©r√©e : {emotion}")
            return True
        logger.info("Aucun stimulus fourni pour la r√©ponse √©motionnelle")
        return False


class VisionTrackingBehavior(BBIABehavior):
    """Comportement de suivi visuel."""

    def __init__(self, vision: BBIAVision):
        super().__init__("vision_tracking", "Suivi visuel d'objets")
        self.vision = vision
        self.priority = 6

    def execute(self, context: dict[str, Any]) -> bool:
        logger.info("Activation du suivi visuel")

        result = self.vision.scan_environment()
        logger.info(f"R√©sultat du scan environnement : {result}")

        if result["objects"]:
            first_object = result["objects"][0]
            logger.info(f"Suivi de l'objet : {first_object['name']}")
            self.vision.track_object(first_object["name"])
            return True

        logger.info("Aucun objet d√©tect√© pour le suivi visuel")
        return False


class ConversationBehavior(BBIABehavior):
    """Comportement de conversation."""

    def __init__(self):
        super().__init__("conversation", "Conversation interactive")
        self.priority = 7

    def execute(self, context: dict[str, Any]) -> bool:
        logger.info("Activation du mode conversation")
        dire_texte("Je vous √©coute.")
        logger.info("Synth√®se vocale : Je vous √©coute.")

        texte = reconnaitre_parole(duree=5)
        logger.info(f"Texte reconnu : {texte}")

        if texte:
            dire_texte(f"J'ai entendu : {texte}")
            logger.info(f"Synth√®se vocale : J'ai entendu : {texte}")

            if "bonjour" in texte.lower():
                dire_texte("Bonjour √† vous aussi !")
                logger.info("Synth√®se vocale : Bonjour √† vous aussi !")
            elif "comment" in texte.lower():
                dire_texte("Je vais tr√®s bien, merci !")
                logger.info("Synth√®se vocale : Je vais tr√®s bien, merci !")
            elif "au revoir" in texte.lower():
                dire_texte("Au revoir ! √Ä bient√¥t !")
                logger.info("Synth√®se vocale : Au revoir ! √Ä bient√¥t !")
            else:
                dire_texte("C'est int√©ressant, dites-moi en plus.")
                logger.info("Synth√®se vocale : C'est int√©ressant, dites-moi en plus.")
        else:
            dire_texte("Je n'ai rien entendu. Pouvez-vous r√©p√©ter ?")
            logger.info("Synth√®se vocale : Je n'ai rien entendu. Pouvez-vous r√©p√©ter ?")

        return True


class AntennaAnimationBehavior(BBIABehavior):
    """Comportement d'animation des antennes."""

    def __init__(self):
        super().__init__("antenna_animation", "Animation des antennes selon l'√©motion")
        self.priority = 5

    def execute(self, context: dict[str, Any]) -> bool:
        emotion = context.get("emotion", "neutral")
        logger.info(f"Animation des antennes pour l'√©motion : {emotion}")

        animations = {
            "happy": "üì° Antennes l√©g√®rement relev√©es et vibrantes",
            "sad": "üì° Antennes tombantes et immobiles",
            "angry": "üì° Antennes rigides et dress√©es",
            "curious": "üì° Antennes fr√©missantes et orient√©es",
            "excited": "üì° Antennes tr√®s vibrantes et anim√©es",
            "neutral": "üì° Antennes droites et calmes",
        }

        animation = animations.get(emotion, animations["neutral"])
        logger.info(f"√âtape animation antennes : {animation}")
        time.sleep(2)
        return True


class HideBehavior(BBIABehavior):
    """Comportement 'se cacher' (hide) pour Reachy Mini : t√™te baiss√©e, antennes repli√©es, yeux ferm√©s."""

    def __init__(self):
        super().__init__(
            "hide", "Se cacher : t√™te baiss√©e, antennes repli√©es, yeux ferm√©s"
        )
        self.priority = 9

    def execute(self, context: dict[str, Any]) -> bool:
        print("üôà [BBIA] S√©quence 'se cacher'...")
        logger.info("D√©but de la s√©quence 'se cacher'")
        print("ü§ñ T√™te qui s'abaisse lentement...")
        logger.info("√âtape : T√™te qui s'abaisse lentement")
        time.sleep(1.5)
        print("üì° Antennes qui se replient devant le visage...")
        logger.info("√âtape : Antennes qui se replient devant le visage")
        time.sleep(1.2)
        print("üëÅÔ∏è Yeux qui se ferment (ou s'√©teignent)...")
        logger.info("√âtape : Yeux qui se ferment (ou s'√©teignent)")
        time.sleep(1)
        print("üí§ BBIA se cache et devient silencieux.")
        logger.info("√âtape : BBIA se cache et devient silencieux")
        print("(BBIA attend discr√®tement...)")
        dire_texte("Je me cache... Chut !")
        logger.info("Synth√®se vocale : Je me cache... Chut !")
        time.sleep(1)
        logger.info("Fin de la s√©quence 'se cacher'")
        return True


class BBIABehaviorManager:
    """Gestionnaire de comportements pour BBIA."""

    def __init__(self) -> None:
        self.behaviors: dict[str, BBIABehavior] = {}
        self.active_behaviors: list[str] = []
        self.behavior_queue: Queue[tuple[str, dict[str, Any]]] = Queue()
        self.is_running = False
        self.worker_thread = None

        # Initialiser les modules BBIA
        self.emotions = BBIAEmotions()
        self.vision = BBIAVision()

        # Enregistrer les comportements par d√©faut
        self._register_default_behaviors()

    def _register_default_behaviors(self):
        """Enregistre les comportements par d√©faut."""
        self.register_behavior(WakeUpBehavior())
        self.register_behavior(GreetingBehavior())
        self.register_behavior(EmotionalResponseBehavior(self.emotions))
        self.register_behavior(VisionTrackingBehavior(self.vision))
        self.register_behavior(ConversationBehavior())
        self.register_behavior(AntennaAnimationBehavior())
        self.register_behavior(HideBehavior())

    def register_behavior(self, behavior: BBIABehavior):
        """Enregistre un nouveau comportement."""
        self.behaviors[behavior.name] = behavior

    def execute_behavior(
        self, behavior_name: str, context: Optional[dict[str, Any]] = None
    ) -> bool:
        """Ex√©cute un comportement sp√©cifique."""
        if behavior_name not in self.behaviors:
            return False

        behavior = self.behaviors[behavior_name]
        context = context or {}

        if behavior.can_execute(context):
            return behavior.execute(context)
        else:
            return False

    def add_to_queue(
        self, behavior_name: str, context: Optional[dict[str, Any]] = None
    ):
        """Ajoute un comportement √† la queue d'ex√©cution."""
        self.behavior_queue.put((behavior_name, context or {}))

    def start_behavior_worker(self):
        """D√©marre le worker de comportements."""
        if self.is_running:
            return

        self.is_running = True
        self.worker_thread = threading.Thread(target=self._behavior_worker, daemon=True)
        self.worker_thread.start()

    def stop_behavior_worker(self):
        """Arr√™te le worker de comportements."""
        self.is_running = False
        if self.worker_thread:
            self.worker_thread.join()

    def _behavior_worker(self):
        """Worker qui traite la queue de comportements."""
        while self.is_running:
            try:
                if not self.behavior_queue.empty():
                    behavior_name, context = self.behavior_queue.get(timeout=1)
                    self.execute_behavior(behavior_name, context)
                else:
                    time.sleep(0.1)
            except Exception as e:
                logger.error(f"Erreur dans le worker de comportements : {e}")
                time.sleep(0.1)  # √âviter une boucle infinie en cas d'erreur

    def get_available_behaviors(self) -> list[dict[str, Any]]:
        """Retourne la liste des comportements disponibles."""
        return [
            {
                "name": behavior.name,
                "description": behavior.description,
                "priority": behavior.priority,
                "is_active": behavior.is_active,
            }
            for behavior in self.behaviors.values()
        ]

    def get_behavior_stats(self) -> dict[str, Any]:
        """Retourne les statistiques des comportements."""
        return {
            "total_behaviors": len(self.behaviors),
            "active_behaviors": len(self.active_behaviors),
            "queue_size": self.behavior_queue.qsize(),
            "worker_running": self.is_running,
            "available_behaviors": self.get_available_behaviors(),
        }


def main():
    """Test du module BBIA Behavior Manager."""
    # Cr√©er l'instance
    manager = BBIABehaviorManager()

    # Test 1 : Comportement de r√©veil
    manager.execute_behavior("wake_up")

    # Test 2 : Salutation
    manager.execute_behavior("greeting")

    # Test 3 : Animation des antennes
    context = {"emotion": "happy"}
    manager.execute_behavior("antenna_animation", context)

    # Test 4 : R√©ponse √©motionnelle
    context = {"stimulus": "compliment"}
    manager.execute_behavior("emotional_response", context)

    # Test 5 : Suivi visuel
    manager.execute_behavior("vision_tracking")

    # Test 6 : Statistiques
    manager.get_behavior_stats()


if __name__ == "__main__":
    main()
    # Flush et fermeture explicite du handler pour garantir l'√©criture du fichier de log
    for h in logger.handlers:
        h.flush()
        h.close()
