#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
BBIA Emotions - Module d'√©motions avanc√© pour Reachy Mini Wireless
√âmotions complexes, expressions faciales, transitions fluides
"""

import random
from typing import Dict, List
from datetime import datetime


class BBIAEmotions:
    """Module d'√©motions avanc√© pour BBIA"""

    def __init__(self):
        self.current_emotion = "neutral"
        self.emotion_intensity = 0.5  # 0.0 √† 1.0
        self.transition_duration = 1.0  # secondes
        self.emotion_history = []

        # D√©finition des √©motions bas√©es sur la r√©f√©rence visuelle
        self.emotions = {
            "neutral": {
                "yeux": "Cercles noirs normaux",
                "antennes": "Droites, calmes",
                "tete": "Position neutre",
                "description": "√âtat de repos, attention normale",
                "color": "‚ö™",
            },
            "happy": {
                "yeux": "Cercles l√©g√®rement agrandis",
                "antennes": "L√©g√®rement relev√©es",
                "tete": "Relev√©e, regard joyeux",
                "description": "Joie, satisfaction, bien-√™tre",
                "color": "üòä",
            },
            "sad": {
                "yeux": "Cercles plus petits",
                "antennes": "Tombantes",
                "tete": "Baiss√©e, regard triste",
                "description": "Tristesse, m√©lancolie, d√©ception",
                "color": "üò¢",
            },
            "angry": {
                "yeux": "Cercles plus intenses",
                "antennes": "Rigides",
                "tete": "Pench√©e, regard dur",
                "description": "Col√®re, frustration, irritation",
                "color": "üò†",
            },
            "curious": {
                "yeux": "Cercles inclin√©s",
                "antennes": "Fr√©missantes",
                "tete": "Inclin√©e, regard attentif",
                "description": "Curiosit√©, int√©r√™t, attention",
                "color": "ü§î",
            },
            "excited": {
                "yeux": "Cercles vibrants",
                "antennes": "Vibrantes",
                "tete": "Relev√©e, regard enthousiaste",
                "description": "Excitation, enthousiasme, √©nergie",
                "color": "ü§©",
            },
            "surprised": {
                "yeux": "Cercles tr√®s agrandis",
                "antennes": "Dress√©es",
                "tete": "Relev√©e, regard √©tonn√©",
                "description": "Surprise, √©tonnement, choc",
                "color": "üò≤",
            },
            "fearful": {
                "yeux": "Cercles tremblants",
                "antennes": "Tremblantes",
                "tete": "Recul√©e, regard craintif",
                "description": "Peur, anxi√©t√©, inqui√©tude",
                "color": "üò®",
            },
        }

        print("üé≠ BBIA Emotions initialis√©")
        print(f"   ‚Ä¢ √âmotion actuelle : {self.current_emotion}")
        print(f"   ‚Ä¢ Intensit√© : {self.emotion_intensity}")
        print(f"   ‚Ä¢ √âmotions disponibles : {len(self.emotions)}")

    def set_emotion(self, emotion: str, intensity: float = 0.5) -> bool:
        """Change l'√©motion de BBIA"""
        if emotion not in self.emotions:
            print(f"‚ùå √âmotion inconnue : {emotion}")
            return False

        old_emotion = self.current_emotion
        self.current_emotion = emotion
        self.emotion_intensity = max(0.0, min(1.0, intensity))

        # Enregistrer dans l'historique
        self.emotion_history.append(
            {
                "emotion": emotion,
                "intensity": self.emotion_intensity,
                "timestamp": datetime.now().isoformat(),
                "previous": old_emotion,
            }
        )

        # Afficher la transition
        self._display_emotion_transition(old_emotion, emotion)

        return True

    def _display_emotion_transition(self, old_emotion: str, new_emotion: str):
        """Affiche la transition d'√©motion"""
        old_data = self.emotions[old_emotion]
        new_data = self.emotions[new_emotion]

        print(f"\nüé≠ Transition d'√©motion : {old_emotion} ‚Üí {new_emotion}")
        print(f"   {old_data['color']} {old_data['description']}")
        print(f"   ‚Üì (transition de {self.transition_duration}s)")
        print(f"   {new_data['color']} {new_data['description']}")

        print(f"\nüìã D√©tails de l'√©motion {new_emotion} :")
        print(f"   ‚Ä¢ Yeux : {new_data['yeux']}")
        print(f"   ‚Ä¢ Antennes : {new_data['antennes']}")
        print(f"   ‚Ä¢ T√™te : {new_data['tete']}")
        print(f"   ‚Ä¢ Intensit√© : {self.emotion_intensity*100:.0f}%")

    def get_current_emotion(self) -> Dict:
        """Retourne l'√©motion actuelle avec ses d√©tails"""
        emotion_data = self.emotions[self.current_emotion].copy()
        emotion_data.update(
            {
                "name": self.current_emotion,
                "intensity": self.emotion_intensity,
                "timestamp": datetime.now().isoformat(),
            }
        )
        return emotion_data

    def get_emotion_history(self, limit: int = 10) -> List[Dict]:
        """Retourne l'historique des √©motions"""
        return self.emotion_history[-limit:] if limit > 0 else self.emotion_history

    def random_emotion(self) -> str:
        """Change vers une √©motion al√©atoire"""
        available_emotions = list(self.emotions.keys())
        available_emotions.remove(self.current_emotion)  # √âviter la m√™me √©motion

        if available_emotions:
            new_emotion = random.choice(available_emotions)
            intensity = random.uniform(0.3, 1.0)
            self.set_emotion(new_emotion, intensity)
            return new_emotion
        return self.current_emotion

    def emotional_response(self, stimulus: str) -> str:
        """R√©ponse √©motionnelle √† un stimulus"""
        responses = {
            "compliment": ["happy", "excited"],
            "insult": ["angry", "sad"],
            "surprise": ["surprised", "curious"],
            "danger": ["fearful", "angry"],
            "question": ["curious", "neutral"],
            "greeting": ["happy", "neutral"],
            "goodbye": ["sad", "neutral"],
            "achievement": ["excited", "happy"],
            "failure": ["sad", "angry"],
            "unknown": ["curious", "neutral"],
        }

        stimulus_lower = stimulus.lower()
        for key, emotions in responses.items():
            if key in stimulus_lower:
                emotion = random.choice(emotions)
                intensity = random.uniform(0.4, 0.9)
                self.set_emotion(emotion, intensity)
                return emotion

        # R√©ponse par d√©faut
        self.set_emotion("curious", 0.5)
        return "curious"

    def blend_emotions(self, emotion1: str, emotion2: str, ratio: float = 0.5) -> str:
        """M√©lange deux √©motions"""
        if emotion1 not in self.emotions or emotion2 not in self.emotions:
            print("‚ùå Une des √©motions n'existe pas")
            return self.current_emotion

        # Logique simple de m√©lange
        if ratio < 0.5:
            result_emotion = emotion1
        else:
            result_emotion = emotion2

        intensity = 0.5 + (abs(ratio - 0.5) * 0.5)  # Intensit√© bas√©e sur la diff√©rence
        self.set_emotion(result_emotion, intensity)

        print(f"üé® M√©lange d'√©motions : {emotion1} + {emotion2} = {result_emotion}")
        return result_emotion

    def get_emotion_stats(self) -> Dict:
        """Retourne les statistiques des √©motions"""
        emotion_counts = {}
        for entry in self.emotion_history:
            emotion = entry["emotion"]
            emotion_counts[emotion] = emotion_counts.get(emotion, 0) + 1

        return {
            "current_emotion": self.current_emotion,
            "current_intensity": self.emotion_intensity,
            "total_transitions": len(self.emotion_history),
            "emotion_counts": emotion_counts,
            "available_emotions": list(self.emotions.keys()),
        }

    def reset_emotions(self):
        """Remet BBIA en √©tat neutre"""
        print("üîÑ Remise √† z√©ro des √©motions")
        self.set_emotion("neutral", 0.5)
        self.emotion_history.clear()


def main():
    """Test du module BBIA Emotions"""
    print("üß™ Test du module BBIA Emotions")
    print("=" * 50)

    # Cr√©er l'instance
    emotions = BBIAEmotions()

    # Test √©motions de base
    print("\n1Ô∏è‚É£ Test √©motions de base")
    emotions.set_emotion("happy", 0.8)
    emotions.set_emotion("curious", 0.6)
    emotions.set_emotion("sad", 0.7)

    # Test √©motion al√©atoire
    print("\n2Ô∏è‚É£ Test √©motion al√©atoire")
    random_emotion = emotions.random_emotion()
    print(f"√âmotion al√©atoire : {random_emotion}")

    # Test r√©ponses √©motionnelles
    print("\n3Ô∏è‚É£ Test r√©ponses √©motionnelles")
    emotions.emotional_response("compliment")
    emotions.emotional_response("question")
    emotions.emotional_response("danger")

    # Test m√©lange d'√©motions
    print("\n4Ô∏è‚É£ Test m√©lange d'√©motions")
    emotions.blend_emotions("happy", "excited", 0.3)

    # Test statistiques
    print("\n5Ô∏è‚É£ Test statistiques")
    stats = emotions.get_emotion_stats()
    print(f"Statistiques : {stats}")

    # Test historique
    print("\n6Ô∏è‚É£ Test historique")
    history = emotions.get_emotion_history(5)
    print(f"Derni√®res √©motions : {[h['emotion'] for h in history]}")

    # Remise √† z√©ro
    print("\n7Ô∏è‚É£ Remise √† z√©ro")
    emotions.reset_emotions()

    print("\n‚úÖ Test BBIA Emotions termin√©")


if __name__ == "__main__":
    main()
