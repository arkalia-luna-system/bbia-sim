#!/usr/bin/env python3
"""
üß™ TESTS DE CONFORMIT√â STRICTE REACHY-MINI
Tests ultra-stricts pour d√©tecter tous les probl√®mes d'expert robotique
Bas√© sur les sp√©cifications exactes du SDK officiel Reachy Mini
"""

import math
import sys
import time
from pathlib import Path

import numpy as np
import pytest

# Ajouter le chemin src au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from bbia_sim.backends.reachy_mini_backend import ReachyMiniBackend

# JOINTS LIMITS EXACTES du mod√®le XML officiel (tir√©es de reachy_mini_REAL_OFFICIAL.xml)
EXACT_JOINT_LIMITS = {
    "stewart_1": (-0.8377580409572196, 1.3962634015955222),
    "stewart_2": (-1.396263401595614, 1.2217304763958803),
    "stewart_3": (-0.8377580409572173, 1.3962634015955244),
    "stewart_4": (-1.3962634015953894, 0.8377580409573525),
    "stewart_5": (-1.2217304763962082, 1.396263401595286),
    "stewart_6": (-1.3962634015954123, 0.8377580409573296),
    "yaw_body": (-2.792526803190975, 2.792526803190879),
    # Antennes: limites conservatrices pour s√©curit√©
    "left_antenna": (-1.0, 1.0),
    "right_antenna": (-1.0, 1.0),
}

# Tol√©rance pour comparaison des limites (erreurs de pr√©cision float)
LIMIT_TOLERANCE = 1e-10


class TestReachyMiniStrictConformity:
    """Tests ultra-stricts de conformit√© pour d√©tecter tous les probl√®mes."""

    def setup_method(self):
        """Configuration avant chaque test."""
        self.backend = ReachyMiniBackend()
        self.backend.connect()

    def teardown_method(self):
        """Nettoyage apr√®s chaque test."""
        if self.backend:
            self.backend.disconnect()

    def test_strict_joint_limits_exact_values(self):
        """Test STRICT: V√©rifier que les limites de joints sont EXACTEMENT conformes au XML officiel."""
        print("\nüß™ TEST STRICT 1: Limites exactes des joints")
        print("=" * 70)

        errors = []
        for joint_name, (expected_min, expected_max) in EXACT_JOINT_LIMITS.items():
            if joint_name not in self.backend.joint_limits:
                errors.append(
                    f"‚ùå Joint {joint_name} MANQUANT dans joint_limits du backend"
                )
                continue

            actual_min, actual_max = self.backend.joint_limits[joint_name]

            # V√©rification STRICTE: les valeurs doivent √™tre EXACTEMENT identiques
            min_diff = abs(actual_min - expected_min)
            max_diff = abs(actual_max - expected_max)

            if min_diff > LIMIT_TOLERANCE:
                errors.append(
                    f"‚ùå {joint_name}: min limite incorrecte - "
                    f"attendu {expected_min:.15f}, obtenu {actual_min:.15f} "
                    f"(diff: {min_diff:.2e})"
                )
            elif max_diff > LIMIT_TOLERANCE:
                errors.append(
                    f"‚ùå {joint_name}: max limite incorrecte - "
                    f"attendu {expected_max:.15f}, obtenu {actual_max:.15f} "
                    f"(diff: {max_diff:.2e})"
                )
            else:
                print(
                    f"‚úÖ {joint_name}: limites EXACTES [{actual_min:.15f}, {actual_max:.15f}]"
                )

        assert len(errors) == 0, "Erreurs limites joints:\n" + "\n".join(errors)

    def test_strict_forbidden_joints_enforcement(self):
        """Test STRICT: V√©rifier que les joints interdits sont IMPOSSIBLES √† contr√¥ler."""
        print("\nüß™ TEST STRICT 2: Protection stricte joints interdits")
        print("=" * 70)

        forbidden_joints = ["left_antenna", "right_antenna"]
        errors = []

        for joint in forbidden_joints:
            # Test 1: set_joint_pos doit retourner False
            result = self.backend.set_joint_pos(joint, 0.1)
            if result:
                errors.append(
                    f"‚ùå {joint}: set_joint_pos a r√©ussi alors que le joint est interdit!"
                )
            else:
                print(f"‚úÖ {joint}: set_joint_pos correctement bloqu√©")

            # Test 2: Le joint doit √™tre dans forbidden_joints
            if joint not in self.backend.forbidden_joints:
                errors.append(
                    f"‚ùå {joint}: devrait √™tre dans forbidden_joints mais absent!"
                )
            else:
                print(f"‚úÖ {joint}: pr√©sent dans forbidden_joints")

        assert len(errors) == 0, "Erreurs protection joints:\n" + "\n".join(errors)

    def test_strict_stewart_individual_control_impossible(self):
        """Test STRICT: V√©rifier que les joints stewart NE PEUVENT PAS √™tre contr√¥l√©s individuellement."""
        print("\nüß™ TEST STRICT 3: Interdiction contr√¥le individuel stewart")
        print("=" * 70)

        stewart_joints = [f"stewart_{i}" for i in range(1, 7)]
        errors = []

        for joint in stewart_joints:
            result = self.backend.set_joint_pos(joint, 0.1)
            # CRITIQUE: set_joint_pos doit retourner False car contr√¥le individuel impossible (IK)
            if result:
                errors.append(
                    f"‚ùå {joint}: set_joint_pos a r√©ussi alors que le contr√¥le individuel est "
                    "impossible (plateforme Stewart utilise IK). "
                    "Utiliser goto_target() ou set_target_head_pose() √† la place!"
                )
            else:
                print(
                    f"‚úÖ {joint}: set_joint_pos correctement bloqu√© (controle individuel impossible)"
                )

        assert len(errors) == 0, "Erreurs contr√¥le stewart:\n" + "\n".join(errors)

    def test_strict_clamping_multi_level(self):
        """Test STRICT: V√©rifier le clamping multi-niveaux (hardware puis s√©curit√©)."""
        print("\nüß™ TEST STRICT 4: Clamping multi-niveaux")
        print("=" * 70)

        errors = []
        test_cases = [
            (
                "yaw_body",
                3.0,
                2.792526803190879,
            ),  # Hors limite hardware ‚Üí clamp hardware
            (
                "yaw_body",
                0.5,
                0.3,
            ),  # Dans limite hardware mais > safe_amplitude ‚Üí clamp s√©curit√©
            ("stewart_1", 2.0, 1.3962634015955222),  # Hors limite hardware
            ("stewart_1", 0.5, 0.3),  # > safe_amplitude ‚Üí clamp s√©curit√©
        ]

        for joint_name, input_value, expected_max_value in test_cases:
            # Positionner le joint
            self.backend.set_joint_pos(joint_name, input_value)

            # Lire la position r√©elle (doit √™tre clamp√©e)
            actual_value = self.backend.get_joint_pos(joint_name)

            # V√©rifier que la valeur est clamp√©e correctement
            if actual_value is None:
                errors.append(f"‚ùå {joint_name}: get_joint_pos retourne None")
                continue

            # La valeur doit √™tre <= expected_max_value (clamp√©)
            if abs(actual_value) > abs(expected_max_value) + 0.01:
                errors.append(
                    f"‚ùå {joint_name}: Clamping √©chou√© - "
                    f"entr√©e {input_value:.3f}, attendu <= {expected_max_value:.3f}, "
                    f"obtenu {actual_value:.3f}"
                )
            else:
                print(
                    f"‚úÖ {joint_name}: Clamping correct "
                    f"{input_value:.3f} ‚Üí {actual_value:.3f} (limite: {expected_max_value:.3f})"
                )

        assert len(errors) == 0, "Erreurs clamping:\n" + "\n".join(errors)

    def test_strict_head_positions_structure_validation(self):
        """Test STRICT: V√©rifier la structure robuste de head_positions (6 ou 12 √©l√©ments)."""
        print("\nüß™ TEST STRICT 5: Validation structure head_positions")
        print("=" * 70)

        head_pos, antenna_pos = self.backend.get_current_joint_positions()

        errors = []

        # V√©rifier que head_pos est une liste
        if not isinstance(head_pos, list):
            errors.append(
                f"‚ùå head_positions doit √™tre une liste, obtenu {type(head_pos)}"
            )

        # V√©rifier la longueur (6 ou 12)
        if len(head_pos) not in [6, 12]:
            errors.append(
                f"‚ùå head_positions doit avoir 6 ou 12 √©l√©ments, obtenu {len(head_pos)}"
            )

        # V√©rifier qu'il n'y a pas de NaN ou inf
        for i, val in enumerate(head_pos):
            if math.isnan(val) or math.isinf(val):
                errors.append(f"‚ùå head_positions[{i}] contient NaN ou inf: {val}")

        # V√©rifier antenna_positions
        if not isinstance(antenna_pos, list):
            errors.append(
                f"‚ùå antenna_positions doit √™tre une liste, obtenu {type(antenna_pos)}"
            )

        if len(antenna_pos) != 2:
            errors.append(
                f"‚ùå antenna_positions doit avoir 2 √©l√©ments, obtenu {len(antenna_pos)}"
            )

        if errors:
            print("\n".join(errors))
            assert False, "Erreurs structure head_positions:\n" + "\n".join(errors)

        print(
            f"‚úÖ head_positions: {len(head_pos)} √©l√©ments, "
            f"antenna_positions: {len(antenna_pos)} √©l√©ments, aucun NaN/inf"
        )

    def test_strict_goto_target_method_validation(self):
        """Test STRICT: V√©rifier la validation robuste de la m√©thode d'interpolation."""
        print("\nüß™ TEST STRICT 6: Validation m√©thode goto_target")
        print("=" * 70)

        try:
            from reachy_mini.utils import create_head_pose

            pose = create_head_pose(pitch=0.1, yaw=0.0, degrees=False)
            errors = []

            # Test m√©thodes valides
            valid_methods = ["minjerk", "MIN_JERK", "linear", "LINEAR"]
            for method in valid_methods:
                try:
                    self.backend.goto_target(head=pose, duration=0.5, method=method)
                    print(f"‚úÖ M√©thode '{method}' accept√©e")
                except Exception as e:
                    errors.append(f"‚ùå M√©thode valide '{method}' rejet√©e: {e}")

            # Test m√©thode invalide (devrait √™tre g√©r√©e gracieusement)
            try:
                self.backend.goto_target(
                    head=pose, duration=0.5, method="invalid_method"
                )
                print("‚úÖ M√©thode invalide g√©r√©e (fallback accept√©)")
            except Exception as e:
                # C'est OK si une erreur est lev√©e pour m√©thode invalide
                print(f"‚ÑπÔ∏è  M√©thode invalide rejet√©e (acceptable): {e}")

        except ImportError:
            print("‚ö†Ô∏è  SDK reachy_mini non disponible, test ignor√©")
            pytest.skip("SDK non disponible")

        assert len(errors) == 0, "Erreurs validation m√©thode:\n" + "\n".join(errors)

    def test_strict_yaw_body_reading_robustness(self):
        """Test STRICT: V√©rifier la lecture robuste de yaw_body (multi-m√©thode fallback)."""
        print("\nüß™ TEST STRICT 7: Robustesse lecture yaw_body")
        print("=" * 70)

        # Test que get_joint_pos retourne une valeur valide pour yaw_body
        yaw_value = self.backend.get_joint_pos("yaw_body")

        errors = []

        if yaw_value is None:
            errors.append("‚ùå get_joint_pos('yaw_body') retourne None")
        elif math.isnan(yaw_value):
            errors.append("‚ùå get_joint_pos('yaw_body') retourne NaN")
        elif math.isinf(yaw_value):
            errors.append("‚ùå get_joint_pos('yaw_body') retourne inf")
        elif not isinstance(yaw_value, (int, float)):
            errors.append(
                f"‚ùå get_joint_pos('yaw_body') retourne {type(yaw_value)} au lieu de float"
            )
        else:
            print(f"‚úÖ yaw_body lu correctement: {yaw_value:.6f} rad")

        # V√©rifier que la valeur est dans des limites raisonnables
        if isinstance(yaw_value, (int, float)):
            if abs(yaw_value) > 3.2:  # L√©g√®rement > limite max (2.79)
                errors.append(
                    f"‚ö†Ô∏è  yaw_body hors limites raisonnables: {yaw_value:.6f} rad"
                )

        assert len(errors) == 0, "Erreurs lecture yaw_body:\n" + "\n".join(errors)

    def test_strict_stewart_joint_reading_robustness(self):
        """Test STRICT: V√©rifier la lecture robuste de tous les joints stewart."""
        print("\nüß™ TEST STRICT 8: Robustesse lecture joints stewart")
        print("=" * 70)

        errors = []
        stewart_joints = [f"stewart_{i}" for i in range(1, 7)]

        for joint_name in stewart_joints:
            value = self.backend.get_joint_pos(joint_name)

            if value is None:
                errors.append(f"‚ùå {joint_name}: get_joint_pos retourne None")
            elif math.isnan(value):
                errors.append(f"‚ùå {joint_name}: get_joint_pos retourne NaN")
            elif math.isinf(value):
                errors.append(f"‚ùå {joint_name}: get_joint_pos retourne inf")
            elif not isinstance(value, (int, float)):
                errors.append(
                    f"‚ùå {joint_name}: type incorrect {type(value)} au lieu de float"
                )
            else:
                # V√©rifier que la valeur est dans les limites hardware
                min_limit, max_limit = EXACT_JOINT_LIMITS[joint_name]
                if value < min_limit - 0.1 or value > max_limit + 0.1:
                    errors.append(
                        f"‚ö†Ô∏è  {joint_name}: valeur {value:.6f} hors limites "
                        f"[{min_limit:.6f}, {max_limit:.6f}]"
                    )
                else:
                    print(f"‚úÖ {joint_name}: {value:.6f} rad (dans limites)")

        assert len(errors) == 0, "Erreurs lecture stewart:\n" + "\n".join(errors)

    def test_strict_parameter_validation(self):
        """Test STRICT: V√©rifier la validation stricte de tous les param√®tres."""
        print("\nüß™ TEST STRICT 9: Validation stricte param√®tres")
        print("=" * 70)

        errors = []

        # Test 1: duration doit √™tre positive
        try:
            from reachy_mini.utils import create_head_pose

            pose = create_head_pose(pitch=0.1)
            self.backend.goto_target(head=pose, duration=-1.0)
            errors.append("‚ùå goto_target avec duration n√©gative accept√©!")
        except (ValueError, Exception):
            print("‚úÖ Duration n√©gative correctement rejet√©e")

        # Test 2: antennas doit √™tre convertible en liste
        try:
            antennas_array = np.array([0.1, -0.1])
            self.backend.goto_target(antennas=antennas_array, duration=0.5)
            print("‚úÖ antennas numpy array converti en liste")
        except Exception as e:
            errors.append(f"‚ùå Conversion antennas numpy array √©chou√©e: {e}")

        # Test 3: look_at_world coordonn√©es invalides doivent √™tre g√©r√©es
        try:
            result = self.backend.look_at_world(1e10, 1e10, 1e10)
            if result is not None:
                print("‚úÖ look_at_world avec coordonn√©es extr√™mes g√©r√©")
            else:
                errors.append(
                    "‚ùå look_at_world devrait retourner une pose m√™me pour coordonn√©es extr√™mes"
                )
        except Exception as e:
            print(
                f"‚ÑπÔ∏è  look_at_world avec coordonn√©es extr√™mes rejet√© (acceptable): {e}"
            )

        assert len(errors) == 0, "Erreurs validation param√®tres:\n" + "\n".join(errors)

    def test_strict_performance_latency(self):
        """Test STRICT: V√©rifier que la latence des op√©rations est acceptable."""
        print("\nüß™ TEST STRICT 10: Performance latence")
        print("=" * 70)

        iterations = 50
        operations = []

        # Mesurer latence set_joint_pos
        start = time.time()
        for _ in range(iterations):
            self.backend.set_joint_pos("yaw_body", 0.1)
        set_joint_latency = (time.time() - start) / iterations * 1000  # ms
        operations.append(("set_joint_pos", set_joint_latency, 10.0))

        # Mesurer latence get_joint_pos
        start = time.time()
        for _ in range(iterations):
            self.backend.get_joint_pos("yaw_body")
        get_joint_latency = (time.time() - start) / iterations * 1000  # ms
        operations.append(("get_joint_pos", get_joint_latency, 5.0))

        errors = []
        for op_name, latency_ms, max_latency_ms in operations:
            if latency_ms > max_latency_ms:
                errors.append(
                    f"‚ùå {op_name}: latence {latency_ms:.2f}ms > {max_latency_ms:.2f}ms"
                )
            else:
                print(
                    f"‚úÖ {op_name}: latence {latency_ms:.2f}ms < {max_latency_ms:.2f}ms"
                )

        assert len(errors) == 0, "Erreurs performance:\n" + "\n".join(errors)


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])
