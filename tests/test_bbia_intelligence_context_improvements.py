#!/usr/bin/env python3
"""
üß™ TESTS AM√âLIORATIONS INTELLIGENCE CONTEXTE BBIA
V√©rifie que les am√©liorations d'intelligence contextuelle fonctionnent
sans r√©gression.
"""

import sys
from pathlib import Path

import pytest

# Ajouter le chemin src au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))


class TestBBIAIntelligenceContext:
    """Tests pour les am√©liorations d'intelligence contextuelle."""

    def test_context_reference_detection(self):
        """Test que BBIA d√©tecte les r√©f√©rences au contexte pr√©c√©dent."""
        try:
            from bbia_sim.bbia_huggingface import BBIAHuggingFace

            hf = BBIAHuggingFace()

            # Premier message pour cr√©er un contexte
            response1 = hf.chat("J'aime la robotique")
            assert isinstance(response1, str)
            assert len(response1) > 0

            # Deuxi√®me message avec r√©f√©rence ("√ßa")
            response2 = hf.chat("C'est int√©ressant √ßa")
            assert isinstance(response2, str)
            assert len(response2) > 0
            # La r√©ponse devrait id√©alement r√©f√©rencer le contexte pr√©c√©dent
            # (test informatif, ne fait pas √©chouer si pas de r√©f√©rence)

            print("‚úÖ Contexte: message1='J'aime la robotique'")
            print("‚úÖ R√©f√©rence: message2='C'est int√©ressant √ßa'")
            print(f"   ‚Üí R√©ponse: {response2[:60]}...")

        except ImportError:
            pytest.skip("Hugging Face non disponible")

    def test_generic_responses_variety_improved(self):
        """Test que les r√©ponses g√©n√©riques ont √©t√© am√©lior√©es (plus vari√©es)."""
        try:
            from bbia_sim.bbia_huggingface import BBIAHuggingFace

            hf = BBIAHuggingFace()

            # Test plusieurs messages g√©n√©riques pour v√©rifier vari√©t√©
            test_messages = [
                "C'est int√©ressant",
                "Je vois",
                "D'accord",
                "C'est bien",
            ]

            responses = []
            for msg in test_messages:
                response = hf.chat(msg)
                responses.append(response)
                assert isinstance(response, str)
                assert len(response) > 20, "R√©ponses doivent √™tre substantielles"

            # V√©rifier qu'on a de la vari√©t√© (au moins 2 r√©ponses diff√©rentes)
            unique_responses = set(responses)
            assert (
                len(unique_responses) >= 2
            ), f"Pas assez de vari√©t√© (unique: {len(unique_responses)})"

            print(
                f"‚úÖ Vari√©t√© r√©ponses g√©n√©riques: {len(unique_responses)}/{len(test_messages)} uniques"
            )

        except ImportError:
            pytest.skip("Hugging Face non disponible")

    def test_question_responses_improved(self):
        """Test que les r√©ponses aux questions ont √©t√© am√©lior√©es."""
        try:
            from bbia_sim.bbia_huggingface import BBIAHuggingFace

            hf = BBIAHuggingFace()

            # Tester diff√©rentes questions
            questions = [
                "Comment √ßa va ?",
                "Pourquoi c'est important ?",
                "Qu'est-ce que c'est ?",
            ]

            for question in questions:
                response = hf.chat(question)
                assert isinstance(response, str)
                assert (
                    len(response) > 15
                ), "R√©ponses questions doivent √™tre substantielles"
                # V√©rifier que c'est une r√©ponse intelligente (contient question ou encouragement)
                has_intelligent_indicator = any(
                    word in response.lower()
                    for word in [
                        "question",
                        "r√©fl√©chir",
                        "d√©tails",
                        "intrigue",
                        "pensez",
                    ]
                )
                assert (
                    has_intelligent_indicator
                ), f"R√©ponse question doit √™tre intelligente: {response[:50]}"
                print(f"‚úÖ Question '{question}' ‚Üí R√©ponse intelligente")

        except ImportError:
            pytest.skip("Hugging Face non disponible")

    def test_context_responses_personality_variety(self):
        """Test que les r√©ponses contextuelles varient selon personnalit√©."""
        try:
            from bbia_sim.bbia_huggingface import BBIAHuggingFace

            # Tester avec diff√©rentes personnalit√©s
            personalities = ["friendly_robot", "curious", "enthusiastic", "calm"]

            for personality in personalities:
                hf = BBIAHuggingFace()
                hf.bbia_personality = personality

                # Cr√©er un contexte
                hf.chat("J'aime programmer")

                # Message avec r√©f√©rence
                response = hf.chat("C'est passionnant √ßa")

                assert isinstance(response, str)
                assert len(response) > 0
                print(f"‚úÖ Personnalit√© '{personality}': R√©ponse contextuelle g√©n√©r√©e")

        except ImportError:
            pytest.skip("Hugging Face non disponible")

    def test_generic_responses_length_and_intelligence(self):
        """Test que les r√©ponses g√©n√©riques sont longues et intelligentes."""
        try:
            from bbia_sim.bbia_huggingface import BBIAHuggingFace

            hf = BBIAHuggingFace()

            # Messages g√©n√©riques
            generic_messages = ["C'est bien", "Int√©ressant", "Je comprends"]

            for msg in generic_messages:
                response = hf.chat(msg)

                # V√©rifier longueur (doit √™tre substantielle)
                assert (
                    len(response) >= 25
                ), f"R√©ponse trop courte: {len(response)} caract√®res"

                # V√©rifier intelligence (contient questions ou encouragements)
                intelligent_words = [
                    "pourquoi",
                    "comment",
                    "qu'est-ce",
                    "dites",
                    "racontez",
                    "curieux",
                    "int√©ressant",
                    "explorer",
                ]
                has_intelligence = any(
                    word in response.lower() for word in intelligent_words
                )

                assert (
                    has_intelligence
                ), f"R√©ponse doit √™tre intelligente: {response[:60]}..."

                print(
                    f"‚úÖ Message g√©n√©rique '{msg}' ‚Üí R√©ponse intelligente ({len(response)} chars)"
                )

        except ImportError:
            pytest.skip("Hugging Face non disponible")

    def test_no_regression_chat_api(self):
        """Test qu'il n'y a pas de r√©gression dans l'API chat."""
        try:
            from bbia_sim.bbia_huggingface import BBIAHuggingFace

            hf = BBIAHuggingFace()

            # V√©rifier que chat() accepte toujours les m√™mes param√®tres
            response1 = hf.chat("Bonjour")
            assert isinstance(response1, str)

            response2 = hf.chat("Salut", use_context=True)
            assert isinstance(response2, str)

            response3 = hf.chat("Hello", use_context=False)
            assert isinstance(response3, str)

            print("‚úÖ API chat pr√©serv√©e (pas de r√©gression)")

        except ImportError:
            pytest.skip("Hugging Face non disponible")


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])
