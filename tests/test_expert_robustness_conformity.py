#!/usr/bin/env python3
"""
üß™ TESTS DE ROBUSTESSE EXPERTE - CONFORMIT√â REACHY MINI
Tests pour d√©tecter des probl√®mes subtils que seuls les experts robotiques verraient.
Renforce les tests existants pour une d√©tection maximale de probl√®mes.
"""

import math
import sys
import threading
import time
from pathlib import Path

import numpy as np
import pytest

# Ajouter le chemin src au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from bbia_sim.backends.reachy_mini_backend import ReachyMiniBackend

# Import SDK officiel si disponible
try:
    from reachy_mini.utils import create_head_pose

    SDK_AVAILABLE = True
except ImportError:
    SDK_AVAILABLE = False
    create_head_pose = None


class TestExpertRobustnessConformity:
    """Tests de robustesse experte pour d√©tecter tous les probl√®mes subtils."""

    def setup_method(self):
        """Configuration avant chaque test."""
        self.backend = ReachyMiniBackend()
        self.backend.connect()

    def teardown_method(self):
        """Nettoyage apr√®s chaque test."""
        if self.backend:
            self.backend.disconnect()

    def test_expert_01_precision_loss_prevention(self):
        """Test expert: Pr√©venir perte de pr√©cision lors de conversions float."""
        print("\nüß™ EXPERT TEST 1: Pr√©vention Perte Pr√©cision")
        print("=" * 60)

        # Test que les limites exactes du XML sont pr√©serv√©es
        exact_limits = {
            "stewart_1": (-0.8377580409572196, 1.3962634015955222),
            "yaw_body": (-2.792526803190975, 2.792526803190879),
        }

        for joint, (min_limit, max_limit) in exact_limits.items():
            joint_info = self.backend.joint_limits.get(joint)
            if joint_info:
                # V√©rifier que les limites backend correspondent aux limites exactes
                backend_min, backend_max = joint_info
                assert (
                    abs(backend_min - min_limit) < 1e-10
                ), f"{joint} min_limit perd en pr√©cision: {backend_min} != {min_limit}"
                assert (
                    abs(backend_max - max_limit) < 1e-10
                ), f"{joint} max_limit perd en pr√©cision: {backend_max} != {max_limit}"
                print(
                    f"‚úÖ {joint}: Pr√©cision pr√©serv√©e (min={backend_min}, max={backend_max})"
                )

    def test_expert_02_thread_safety_concurrent_access(self):
        """Test expert: Acc√®s concurrent multi-thread ne doit pas casser."""
        print("\nüß™ EXPERT TEST 2: Thread Safety - Acc√®s Concurrent")
        print("=" * 60)

        errors = []
        results = []

        def worker(thread_id: int) -> None:
            """Travailleur thread pour test concurrent."""
            try:
                for i in range(10):
                    emotion = ["happy", "sad", "neutral"][i % 3]
                    self.backend.set_emotion(emotion, 0.5)
                    pos = self.backend.get_joint_pos("yaw_body")
                    results.append((thread_id, i, emotion, pos))
                    time.sleep(0.01)
            except Exception as e:
                errors.append((thread_id, e))

        # Lancer 3 threads concurrents
        threads = []
        for tid in range(3):
            t = threading.Thread(target=worker, args=(tid,))
            threads.append(t)
            t.start()

        # Attendre fin
        for t in threads:
            t.join(timeout=5.0)

        # V√©rifier r√©sultats
        assert len(errors) == 0, f"Erreurs thread-safety d√©tect√©es: {errors}"
        assert len(results) == 30, f"R√©sultats manquants: {len(results)}/30"
        print(f"‚úÖ Thread-safety: {len(results)} op√©rations r√©ussies sans erreur")

    def test_expert_03_pose_matrix_validation(self):
        """Test expert: Validation des matrices de pose (4x4, unitaire, etc.)."""
        print("\nüß™ EXPERT TEST 3: Validation Matrices Pose")
        print("=" * 60)

        if not SDK_AVAILABLE:
            print("‚ö†Ô∏è  Test ignor√© (SDK non disponible)")
            return

        # Test create_head_pose retourne matrice valide
        pose = create_head_pose(pitch=0.1, yaw=0.05)
        assert pose.shape == (4, 4), f"Pose doit √™tre 4x4, obtenu {pose.shape}"

        # V√©rifier que la matrice est de rotation valide (determinant = 1)
        rotation_part = pose[:3, :3]
        det = np.linalg.det(rotation_part)
        assert abs(det - 1.0) < 0.01, f"Determinant rotation doit √™tre ~1, obtenu {det}"

        # V√©rifier que la matrice est orthogonale (R^T * R = I)
        should_be_identity = rotation_part.T @ rotation_part
        identity = np.eye(3)
        assert np.allclose(
            should_be_identity, identity, atol=0.01
        ), "Matrice de rotation doit √™tre orthogonale"

        print("‚úÖ Matrice pose valide (4x4, d√©terminant=1, orthogonale)")

    def test_expert_04_interpolation_timing_consistency(self):
        """Test expert: Les interpolations doivent respecter la duration exacte."""
        print("\nüß™ EXPERT TEST 4: Coh√©rence Timing Interpolation")
        print("=" * 60)

        if not SDK_AVAILABLE:
            print("‚ö†Ô∏è  Test ignor√© (SDK non disponible)")
            return

        # Test que goto_target avec duration=1.0 prend ~1.0s
        test_duration = 0.5
        pose = create_head_pose(pitch=0.1, yaw=0.0)

        start_time = time.time()
        self.backend.goto_target(head=pose, duration=test_duration, method="linear")
        elapsed = time.time() - start_time

        # En simulation, peut √™tre instantan√©, mais en r√©el doit respecter duration
        if self.backend.is_connected and self.backend.robot:
            # Mode r√©el: doit √™tre proche de la duration
            assert (
                abs(elapsed - test_duration) < 0.2
            ), f"Duration non respect√©e: {elapsed:.3f}s au lieu de {test_duration}s"
            print(f"‚úÖ Duration respect√©e: {elapsed:.3f}s (attendu {test_duration}s)")
        else:
            print(
                f"‚ÑπÔ∏è  Mode simulation: duration={test_duration}s, elapsed={elapsed:.3f}s"
            )

    def test_expert_05_memory_leak_detection(self):
        """Test expert: D√©tecter fuites m√©moire lors d'op√©rations r√©p√©t√©es."""
        print("\nüß™ EXPERT TEST 5: D√©tection Fuites M√©moire")
        print("=" * 60)

        import gc
        import tracemalloc

        # D√©marrer tra√ßage m√©moire
        tracemalloc.start()
        snapshot_before = tracemalloc.take_snapshot()

        # Effectuer 100 op√©rations r√©p√©t√©es
        for i in range(100):
            self.backend.set_emotion("happy", 0.5)
            self.backend.get_joint_pos("yaw_body")
            if i % 10 == 0:
                gc.collect()  # Forcer collecte p√©riodique

        # Snapshot apr√®s
        snapshot_after = tracemalloc.take_snapshot()
        top_stats = snapshot_after.compare_to(snapshot_before, "lineno")

        # V√©rifier qu'il n'y a pas de fuite majeure (> 10MB)
        total_diff = sum(stat.size_diff for stat in top_stats[:10])
        total_mb = total_diff / (1024 * 1024)

        assert (
            total_mb < 10.0
        ), f"Fuite m√©moire d√©tect√©e: {total_mb:.2f}MB apr√®s 100 op√©rations"
        print(f"‚úÖ M√©moire: {total_mb:.2f}MB (sain, <10MB)")

        tracemalloc.stop()

    def test_expert_06_emotion_state_consistency(self):
        """Test expert: L'√©tat √©motionnel doit √™tre coh√©rent apr√®s chaque transition."""
        print("\nüß™ EXPERT TEST 6: Coh√©rence √âtat √âmotionnel")
        print("=" * 60)

        emotions = ["happy", "sad", "excited", "curious", "neutral", "calm"]

        for emotion in emotions:
            # Appliquer √©motion
            success = self.backend.set_emotion(emotion, 0.7)
            assert success is True, f"set_emotion({emotion}) doit r√©ussir"

            # V√©rifier que l'√©tat est coh√©rent (t√©l√©metrie)
            telemetry = self.backend.get_telemetry()
            assert (
                "current_emotion" in telemetry
            ), "T√©l√©metrie doit contenir current_emotion"
            # Note: L'√©motion peut √™tre mapp√©e (ex: BBIA 12 √©motions ‚Üí SDK 6 √©motions)
            # Donc on v√©rifie juste que l'√©tat existe
            print(
                f"‚úÖ √âtat coh√©rent apr√®s {emotion} (t√©l√©metrie: {telemetry.get('current_emotion', 'N/A')})"
            )

    def test_expert_07_joint_position_continuity(self):
        """Test expert: Les positions de joints doivent √™tre continues (pas de saut)."""
        print("\nüß™ EXPERT TEST 7: Continuit√© Positions Joints")
        print("=" * 60)

        # Faire un mouvement progressif
        positions = []
        for i in range(10):
            angle = 0.2 * math.sin(2 * math.pi * i / 10)
            self.backend.set_joint_pos("yaw_body", angle)
            time.sleep(0.05)  # Petit d√©lai pour laisser le mouvement se propager
            pos = self.backend.get_joint_pos("yaw_body")
            positions.append((i, pos))

        # V√©rifier continuit√© (pas de saut > 0.5 rad entre positions adjacentes)
        for i in range(1, len(positions)):
            prev_pos = positions[i - 1][1]
            curr_pos = positions[i][1]
            diff = abs(curr_pos - prev_pos)
            assert (
                diff < 0.5
            ), f"Saut d√©tect√© entre step {i-1} et {i}: {prev_pos:.4f} ‚Üí {curr_pos:.4f} (diff={diff:.4f})"

        print(f"‚úÖ Continuit√© pr√©serv√©e: {len(positions)} positions continues")

    def test_expert_08_backend_reconnection_resilience(self):
        """Test expert: Le backend doit supporter reconnexions multiples."""
        print("\nüß™ EXPERT TEST 8: R√©silience Reconnexions")
        print("=" * 60)

        # Connexion/d√©connexion multiples
        for i in range(3):
            self.backend.disconnect()
            time.sleep(0.1)
            self.backend.connect()

            # V√©rifier √©tat
            assert self.backend.is_connected, f"Reconnexion {i+1} √©chou√©e"
            pos = self.backend.get_joint_pos("yaw_body")
            assert isinstance(pos, float), f"√âtat incoh√©rent apr√®s reconnexion {i+1}"
            print(f"‚úÖ Reconnexion {i+1}: √âtat coh√©rent")

    def test_expert_09_look_at_image_boundary_pixels(self):
        """Test expert: look_at_image doit g√©rer pixels aux bords de l'image."""
        print("\nüß™ EXPERT TEST 9: Pixels Bords Image")
        print("=" * 60)

        # R√©solution typique cam√©ra: 1920x1080 (suppos√©)
        width, height = 1920, 1080

        boundary_pixels = [
            (0, 0),  # Coin sup√©rieur gauche
            (width - 1, 0),  # Coin sup√©rieur droit
            (0, height - 1),  # Coin inf√©rieur gauche
            (width - 1, height - 1),  # Coin inf√©rieur droit
            (width // 2, 0),  # Milieu haut
            (width // 2, height - 1),  # Milieu bas
        ]

        for u, v in boundary_pixels:
            try:
                result = self.backend.look_at_image(u, v, duration=0.3)
                assert isinstance(
                    result, np.ndarray
                ), f"look_at_image({u}, {v}) doit retourner ndarray"
                print(f"‚úÖ Pixel bord ({u}, {v}): OK")
            except (ValueError, Exception) as e:
                print(f"‚ö†Ô∏è  Pixel bord ({u}, {v}): {type(e).__name__}")

    def test_expert_10_recording_move_data_structure(self):
        """Test expert: Les mouvements enregistr√©s doivent avoir structure valide."""
        print("\nüß™ EXPERT TEST 10: Structure Donn√©es Recording")
        print("=" * 60)

        # D√©marrer enregistrement
        self.backend.start_recording()
        time.sleep(0.2)

        # Faire un mouvement
        self.backend.set_joint_pos("yaw_body", 0.1)
        time.sleep(0.1)
        self.backend.set_joint_pos("yaw_body", 0.0)

        # Arr√™ter et r√©cup√©rer
        move_data = self.backend.stop_recording()

        if move_data is not None:
            # V√©rifier structure
            assert isinstance(
                move_data, list
            ), f"Move data doit √™tre liste, obtenu {type(move_data)}"
            # Move doit √™tre s√©quence de frames (m√™me si vide en simulation)
            print(f"‚úÖ Move enregistr√©: {len(move_data)} frames (structure valide)")

    def test_expert_11_gravity_compensation_state(self):
        """Test expert: √âtat compensation gravit√© doit √™tre persistant."""
        print("\nüß™ EXPERT TEST 11: √âtat Compensation Gravit√©")
        print("=" * 60)

        # Activer compensation
        self.backend.enable_gravity_compensation()
        time.sleep(0.1)

        # V√©rifier qu'on peut toujours contr√¥ler les joints
        pos_before = self.backend.get_joint_pos("yaw_body")
        self.backend.set_joint_pos("yaw_body", 0.1)
        time.sleep(0.1)
        pos_after = self.backend.get_joint_pos("yaw_body")

        # D√©sactiver
        self.backend.disable_gravity_compensation()
        print(
            f"‚úÖ Compensation gravit√©: contr√¥le pr√©serv√© (pos: {pos_before:.4f} ‚Üí {pos_after:.4f})"
        )

    def test_expert_12_telemetry_timestamp_accuracy(self):
        """Test expert: Les timestamps t√©l√©m√©trie doivent √™tre coh√©rents."""
        print("\nüß™ EXPERT TEST 12: Pr√©cision Timestamps T√©l√©m√©trie")
        print("=" * 60)

        t1 = time.time()
        telemetry1 = self.backend.get_telemetry()
        t2 = time.time()

        # V√©rifier que elapsed_time est coh√©rent
        if "elapsed_time" in telemetry1:
            elapsed = telemetry1["elapsed_time"]
            # elapsed_time doit √™tre >= 0 et coh√©rent avec start_time
            assert elapsed >= 0, f"elapsed_time n√©gatif: {elapsed}"
            print(
                f"‚úÖ Timestamp coh√©rent: elapsed_time={elapsed:.3f}s (mesur√©: {t2-t1:.3f}s)"
            )

    def test_expert_13_interpolation_method_flexibility(self):
        """Test expert: Toutes les m√©thodes d'interpolation doivent fonctionner."""
        print("\nüß™ EXPERT TEST 13: Flexibilit√© M√©thodes Interpolation")
        print("=" * 60)

        if not SDK_AVAILABLE:
            print("‚ö†Ô∏è  Test ignor√© (SDK non disponible)")
            return

        methods = [
            "minjerk",
            "MIN_JERK",
            "linear",
            "LINEAR",
            "ease_in_out",
            "EASE_IN_OUT",
            "cartoon",
            "CARTOON",
        ]

        pose = create_head_pose(pitch=0.1, yaw=0.0)

        for method in methods:
            try:
                # Tester toutes les variations (minuscules, majuscules, etc.)
                self.backend.goto_target(head=pose, duration=0.3, method=method)
                print(f"‚úÖ M√©thode '{method}': OK")
            except Exception as e:
                print(f"‚ö†Ô∏è  M√©thode '{method}': {type(e).__name__}")

    def test_expert_14_media_backend_fallback_order(self):
        """Test expert: Ordre de fallback media doit √™tre correct."""
        print("\nüß™ EXPERT TEST 14: Ordre Fallback Media")
        print("=" * 60)

        # V√©rifier que media est accessible
        media = self.backend.media
        if media is None:
            print("‚ÑπÔ∏è  Mode simulation: media non disponible (attendu)")
            return

        # V√©rifier ordre de priorit√©: play_audio > speaker.play > speaker.play_file
        has_play_audio = hasattr(media, "play_audio")
        speaker = getattr(media, "speaker", None)
        has_speaker_play = speaker is not None and hasattr(speaker, "play")
        has_speaker_play_file = speaker is not None and hasattr(speaker, "play_file")

        print(f"  play_audio: {'‚úÖ' if has_play_audio else '‚ùå'}")
        print(f"  speaker.play: {'‚úÖ' if has_speaker_play else '‚ùå'}")
        print(f"  speaker.play_file: {'‚úÖ' if has_speaker_play_file else '‚ùå'}")

        # Au moins une m√©thode doit √™tre disponible
        assert (
            has_play_audio or has_speaker_play or has_speaker_play_file
        ), "Aucune m√©thode play media disponible"
        print("‚úÖ Ordre fallback m√©dias v√©rifi√©")

    def test_expert_15_conversation_history_memory_limit(self):
        """Test expert: L'historique conversation ne doit pas cro√Ætre ind√©finiment."""
        print("\nüß™ EXPERT TEST 15: Limite M√©moire Historique Conversation")
        print("=" * 60)

        try:
            from bbia_sim.bbia_huggingface import BBIAHuggingFace

            bbia = BBIAHuggingFace()

            # Envoyer beaucoup de messages
            for i in range(100):
                bbia.chat(f"Message {i}")

            # V√©rifier que l'historique ne d√©passe pas une limite raisonnable
            # (ou impl√©mente une limite si absente)
            history_len = len(bbia.conversation_history)
            assert (
                history_len <= 100
            ), f"Historique trop long: {history_len} messages (max recommand√©: 100)"

            print(f"‚úÖ Historique conversation: {history_len} messages (g√©r√©)")
        except ImportError:
            print("‚ö†Ô∏è  Test ignor√© (BBIAHuggingFace non disponible)")


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])
