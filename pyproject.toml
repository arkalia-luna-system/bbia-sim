[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bbia-sim"
version = "1.2.0"
description = "BBIA - Moteur cognitif Python pour robot Reachy Mini Wireless avec Backend Unifié RobotAPI + IA Légère (Whisper + YOLOv8n + MediaPipe) + SDK Officiel Reachy-Mini"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Arkalia Luna System", email = "arkalia.luna.system@gmail.com"}
]
maintainers = [
    {name = "Arkalia Luna System", email = "arkalia.luna.system@gmail.com"}
]
keywords = ["robotics", "ai", "emotion", "cognitive", "reachy", "simulation"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "pyttsx3>=2.90",
    "SpeechRecognition>=3.10.0",
    "sounddevice>=0.4.6",
    "numpy>=1.24.0",
    "opencv-python>=4.8.0",
    "Pillow>=10.0.0",
    "mujoco>=2.1.0",
    "fastapi>=0.109.1",
    "uvicorn[standard]>=0.24.0",
    "websockets>=12.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.0.0",
    "python-multipart>=0.0.18",
]

[project.optional-dependencies]
audio = [
    "pyaudio>=0.2.11",
]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "bandit>=1.7.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-timeout>=2.0.0",
    "coverage>=7.0.0",
    "pre-commit>=3.0.0",
    "pip-audit>=2.6.0",
    "safety>=2.3.5",
    "python-dotenv>=1.0.0",
    "httpx>=0.25.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "pytest-timeout>=2.0.0",
    "coverage>=7.0.0",
    "httpx>=0.25.0",
]

[project.scripts]
bbia-sim = "bbia_sim.bbia_awake:main"

[project.urls]
Homepage = "https://github.com/arkalia-luna-system/bbia-sim"
Documentation = "https://github.com/arkalia-luna-system/bbia-sim#readme"
Repository = "https://github.com/arkalia-luna-system/bbia-sim"
"Bug Tracker" = "https://github.com/arkalia-luna-system/bbia-sim/issues"

[tool.setuptools.packages.find]
where = ["src"]
include = ["bbia_sim*"]
exclude = ["tests*", "*.__pycache__", "*.DS_Store"]

[tool.setuptools.package-data]
bbia_sim = ["*.py", "*.txt", "*.wav"]

[tool.setuptools.exclude-package-data]
"*" = ["*._*", "*.DS_Store", "._*", "**/._*", "**/*._*", "__pycache__", "**/__pycache__"]

# Configuration pytest moderne et complète
[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
norecursedirs = [".git", "logs", ".venv", "venv", "__pycache__", "reachy_repos"]
minversion = "6.0"
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--cache-clear",
    "--import-mode=importlib",
    "--maxfail=5",
    "--durations=10",
]
env = [
    "MUJOCO_GL=disable",
    "DISPLAY=",
    "BBIA_DISABLE_AUDIO=1",
]
markers = [
    "fast: marks tests as fast (deselect with '-m \"not fast\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "audio: marks tests requiring audio hardware",
    "vision: marks tests requiring camera/vision",
    "robot: marks tests requiring real robot connection",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | build
  | dist
  | logs
  | reachy_repos
  | assets
)/
'''
preview = true

[tool.ruff]
target-version = "py39"
line-length = 88
exclude = [
    ".venv",
    "venv",
    "logs",
    "reachy_repos",
    "assets",
    "__pycache__",
    ".git",
    ".mypy_cache",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.isort]
known-first-party = ["bbia_sim"]

[tool.mypy]
python_version = "3.9"
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = false
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_no_return = true
warn_unreachable = true
strict_equality = false
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
color_output = true
error_summary = true
exclude = [
    "tests/",
    "logs/",
    "reachy_repos/",
    "assets/",
    ".venv/",
    "venv/",
]

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["bbia_sim"]
known_third_party = [
    "pytest", "numpy", "opencv", "PIL", "pyttsx3", "speech_recognition", 
    "pyaudio", "sounddevice"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"
skip = [".venv", "venv", "logs", "reachy_repos", "assets", "__pycache__", ".git"]
skip_glob = ["**/reachy_repos/*"]
force_sort_within_sections = true
lines_after_imports = 2

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "logs", "reachy_repos", "assets"]
skips = ["B101", "B108", "B306", "B601"]
targets = ["src/bbia_sim/"]
recursive = true
verbose = false
output_format = "json"
output_file = "logs/bandit_report.json"

[tool.coverage.run]
source = ["src/bbia_sim"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/logs/*",
    "*/reachy_repos/*",
    "*/assets/*",
    "*/htmlcov/*",
]
branch = true
relative_files = true
data_file = ".coverage"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
fail_under = 1
