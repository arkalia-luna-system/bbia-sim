#!/usr/bin/env python3
"""Mode d√©mo complet BBIA-SIM - Phase 3 : √âcosyst√®me Ouvert."""

import argparse
import asyncio
import logging
import sys
import time

import httpx

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)


class BBIADemoMode:
    """Mode d√©monstration complet pour BBIA-SIM Phase 3."""

    def __init__(self, base_url: str = "http://localhost:8000"):
        """Initialise le mode d√©mo.

        Args:
            base_url: URL de base de l'API
        """
        self.base_url = base_url
        self.client = httpx.AsyncClient(timeout=30.0)
        self.demo_config = {
            "simulation": {
                "name": "Mode Simulation",
                "description": "D√©monstration avec simulation MuJoCo",
                "backend": "mujoco",
                "features": ["3D Viewer", "Physique r√©aliste", "Contr√¥le complet"],
                "duration": 30.0,
                "emotions": ["happy", "curious", "excited", "sad"],
                "behaviors": ["wake_up", "greeting", "nod", "wave"],
            },
            "robot_real": {
                "name": "Mode Robot R√©el",
                "description": "D√©monstration avec robot Reachy Mini physique",
                "backend": "reachy_mini",
                "features": ["Robot physique", "SDK officiel", "Contr√¥le s√©curis√©"],
                "duration": 20.0,
                "emotions": ["happy", "curious"],
                "behaviors": ["wake_up", "greeting"],
            },
            "mixed": {
                "name": "Mode Mixte",
                "description": "Basculement entre simulation et robot r√©el",
                "backend": "auto",
                "features": ["Switch automatique", "Comparaison", "Tests"],
                "duration": 45.0,
                "emotions": ["happy", "sad", "curious", "excited"],
                "behaviors": ["wake_up", "greeting", "nod"],
            },
        }

    async def check_api_status(self) -> bool:
        """V√©rifie que l'API est accessible."""
        try:
            logger.info("üîç V√©rification de l'API...")
            response = await self.client.get(f"{self.base_url}/health")

            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ API accessible: {data.get('status', 'N/A')}")
                return True
            else:
                logger.error(f"‚ùå API non accessible: {response.status_code}")
                return False
        except Exception as e:
            logger.error(f"‚ùå Erreur de connexion: {e}")
            return False

    async def get_ecosystem_info(self) -> dict | None:
        """R√©cup√®re les informations de l'√©cosyst√®me."""
        try:
            response = await self.client.get(
                f"{self.base_url}/api/ecosystem/capabilities"
            )
            if response.status_code == 200:
                return response.json()
            return None
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration √©cosyst√®me: {e}")
            return None

    async def demo_mode_simulation(self) -> bool:
        """D√©monstration en mode simulation."""
        logger.info("\n" + "=" * 60)
        logger.info("üéÆ D√âMONSTRATION - MODE SIMULATION")
        logger.info("=" * 60)

        config = self.demo_config["simulation"]
        logger.info(f"üìä Configuration: {config['name']}")
        logger.info(f"üìä Description: {config['description']}")
        logger.info(f"üìä Backend: {config['backend']}")
        logger.info(f"üìä Dur√©e: {config['duration']}s")

        try:
            # D√©marrage de la d√©mo
            logger.info("\nüöÄ D√©marrage de la d√©monstration simulation...")
            response = await self.client.post(
                f"{self.base_url}/api/ecosystem/demo/start",
                params={
                    "mode": "simulation",
                    "duration": config["duration"],
                    "emotion": "happy",
                },
            )

            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ D√©mo d√©marr√©e: {data.get('status', 'N/A')}")
                logger.info(f"üìä Message: {data.get('message', 'N/A')}")
            else:
                logger.warning(f"‚ö†Ô∏è D√©mo: √âchec (code {response.status_code})")

            # D√©monstration des √©motions
            logger.info("\nüòä D√©monstration des √©motions BBIA...")
            for emotion in config["emotions"]:
                try:
                    response = await self.client.post(
                        f"{self.base_url}/api/ecosystem/emotions/apply",
                        params={"emotion": emotion, "intensity": 0.7, "duration": 3.0},
                    )

                    if response.status_code == 200:
                        data = response.json()
                        logger.info(f"   ‚úÖ {emotion}: {data.get('status', 'N/A')}")
                        logger.info(
                            f"      Joints affect√©s: {len(data.get('joints_affected', []))}"
                        )
                    else:
                        logger.warning(
                            f"   ‚ö†Ô∏è {emotion}: √âchec (code {response.status_code})"
                        )

                    await asyncio.sleep(1.0)  # Pause entre les √©motions

                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è {emotion}: Erreur - {e}")

            # D√©monstration des comportements
            logger.info("\nüé≠ D√©monstration des comportements BBIA...")
            for behavior in config["behaviors"]:
                try:
                    response = await self.client.post(
                        f"{self.base_url}/api/ecosystem/behaviors/execute",
                        params={
                            "behavior": behavior,
                            "intensity": 1.0,
                            "duration": 5.0,
                        },
                    )

                    if response.status_code == 200:
                        data = response.json()
                        logger.info(f"   ‚úÖ {behavior}: {data.get('status', 'N/A')}")
                        logger.info(
                            f"      Dur√©e estim√©e: {data.get('estimated_duration', 'N/A')}s"
                        )
                    else:
                        logger.warning(
                            f"   ‚ö†Ô∏è {behavior}: √âchec (code {response.status_code})"
                        )

                    await asyncio.sleep(2.0)  # Pause entre les comportements

                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è {behavior}: Erreur - {e}")

            logger.info("\n‚úÖ D√©monstration simulation termin√©e")
            return True

        except Exception as e:
            logger.error(f"‚ùå Erreur d√©mo simulation: {e}")
            return False

    async def demo_mode_robot_real(self) -> bool:
        """D√©monstration en mode robot r√©el."""
        logger.info("\n" + "=" * 60)
        logger.info("ü§ñ D√âMONSTRATION - MODE ROBOT R√âEL")
        logger.info("=" * 60)

        config = self.demo_config["robot_real"]
        logger.info(f"üìä Configuration: {config['name']}")
        logger.info(f"üìä Description: {config['description']}")
        logger.info(f"üìä Backend: {config['backend']}")
        logger.info(f"üìä Dur√©e: {config['duration']}s")
        logger.info("‚ö†Ô∏è ATTENTION: Mode robot r√©el - S√©curit√© maximale")

        try:
            # D√©marrage de la d√©mo
            logger.info("\nüöÄ D√©marrage de la d√©monstration robot r√©el...")
            response = await self.client.post(
                f"{self.base_url}/api/ecosystem/demo/start",
                params={
                    "mode": "robot_real",
                    "duration": config["duration"],
                    "emotion": "happy",
                },
            )

            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ D√©mo d√©marr√©e: {data.get('status', 'N/A')}")
                logger.info(f"üìä Message: {data.get('message', 'N/A')}")
            else:
                logger.warning(f"‚ö†Ô∏è D√©mo: √âchec (code {response.status_code})")

            # D√©monstration s√©curis√©e des √©motions
            logger.info("\nüòä D√©monstration s√©curis√©e des √©motions BBIA...")
            for emotion in config["emotions"]:
                try:
                    response = await self.client.post(
                        f"{self.base_url}/api/ecosystem/emotions/apply",
                        params={
                            "emotion": emotion,
                            "intensity": 0.3,  # Intensit√© r√©duite pour s√©curit√©
                            "duration": 2.0,  # Dur√©e r√©duite
                        },
                    )

                    if response.status_code == 200:
                        data = response.json()
                        logger.info(f"   ‚úÖ {emotion}: {data.get('status', 'N/A')}")
                        logger.info(
                            f"      Joints affect√©s: {len(data.get('joints_affected', []))}"
                        )
                    else:
                        logger.warning(
                            f"   ‚ö†Ô∏è {emotion}: √âchec (code {response.status_code})"
                        )

                    await asyncio.sleep(2.0)  # Pause plus longue pour s√©curit√©

                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è {emotion}: Erreur - {e}")

            # D√©monstration s√©curis√©e des comportements
            logger.info("\nüé≠ D√©monstration s√©curis√©e des comportements BBIA...")
            for behavior in config["behaviors"]:
                try:
                    response = await self.client.post(
                        f"{self.base_url}/api/ecosystem/behaviors/execute",
                        params={
                            "behavior": behavior,
                            "intensity": 0.5,  # Intensit√© r√©duite pour s√©curit√©
                            "duration": 3.0,  # Dur√©e r√©duite
                        },
                    )

                    if response.status_code == 200:
                        data = response.json()
                        logger.info(f"   ‚úÖ {behavior}: {data.get('status', 'N/A')}")
                        logger.info(
                            f"      Dur√©e estim√©e: {data.get('estimated_duration', 'N/A')}s"
                        )
                    else:
                        logger.warning(
                            f"   ‚ö†Ô∏è {behavior}: √âchec (code {response.status_code})"
                        )

                    await asyncio.sleep(3.0)  # Pause plus longue pour s√©curit√©

                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è {behavior}: Erreur - {e}")

            logger.info("\n‚úÖ D√©monstration robot r√©el termin√©e")
            logger.info("üõ°Ô∏è S√©curit√©: Tous les mouvements ont √©t√© s√©curis√©s")
            return True

        except Exception as e:
            logger.error(f"‚ùå Erreur d√©mo robot r√©el: {e}")
            return False

    async def demo_mode_mixed(self) -> bool:
        """D√©monstration en mode mixte."""
        logger.info("\n" + "=" * 60)
        logger.info("üîÑ D√âMONSTRATION - MODE MIXTE")
        logger.info("=" * 60)

        config = self.demo_config["mixed"]
        logger.info(f"üìä Configuration: {config['name']}")
        logger.info(f"üìä Description: {config['description']}")
        logger.info(f"üìä Backend: {config['backend']}")
        logger.info(f"üìä Dur√©e: {config['duration']}s")

        try:
            # Phase 1: Simulation
            logger.info("\nüéÆ Phase 1: D√©monstration Simulation")
            await self.demo_mode_simulation()

            await asyncio.sleep(2.0)  # Pause entre les phases

            # Phase 2: Robot r√©el (si disponible)
            logger.info("\nü§ñ Phase 2: D√©monstration Robot R√©el")
            logger.info("‚ö†Ô∏è Note: Mode robot r√©el n√©cessite un robot physique connect√©")

            # Test de disponibilit√© robot r√©el
            try:
                response = await self.client.get(
                    f"{self.base_url}/api/ecosystem/status"
                )
                if response.status_code == 200:
                    data = response.json()
                    robot_connected = data.get("robot_connected", False)

                    if robot_connected:
                        logger.info("‚úÖ Robot r√©el d√©tect√© - D√©monstration s√©curis√©e")
                        await self.demo_mode_robot_real()
                    else:
                        logger.info("‚ö†Ô∏è Robot r√©el non d√©tect√© - Simulation uniquement")
                        logger.info(
                            "üí° Connectez un robot Reachy Mini pour tester le mode r√©el"
                        )
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Impossible de v√©rifier le statut robot: {e}")

            # Phase 3: Comparaison et analyse
            logger.info("\nüìä Phase 3: Comparaison et Analyse")
            logger.info("‚úÖ Simulation: Fonctionnalit√©s compl√®tes, s√©curit√© maximale")
            logger.info("‚úÖ Robot r√©el: Contr√¥le physique, s√©curit√© renforc√©e")
            logger.info("‚úÖ Mode mixte: Basculement transparent entre les modes")

            logger.info("\n‚úÖ D√©monstration mode mixte termin√©e")
            return True

        except Exception as e:
            logger.error(f"‚ùå Erreur d√©mo mode mixte: {e}")
            return False

    async def run_demo_mode(self, mode: str) -> bool:
        """Ex√©cute le mode de d√©monstration sp√©cifi√©."""
        logger.info("üöÄ D√âMONSTRATION COMPL√àTE BBIA-SIM v1.2.0 - PHASE 3")
        logger.info("=" * 80)
        logger.info(f"üìç URL de base: {self.base_url}")
        logger.info(f"üéÆ Mode: {mode}")
        logger.info(f"üïê D√©marrage: {time.strftime('%Y-%m-%d %H:%M:%S')}")

        # V√©rification de l'API
        if not await self.check_api_status():
            logger.error("‚ùå Impossible de continuer - API non accessible")
            return False

        # R√©cup√©ration des informations √©cosyst√®me
        ecosystem_info = await self.get_ecosystem_info()
        if ecosystem_info:
            logger.info("\nüåê Informations √âcosyst√®me:")
            logger.info(f"   ‚Ä¢ Mod√®le: {ecosystem_info.get('model', 'N/A')}")
            logger.info(f"   ‚Ä¢ Joints: {ecosystem_info.get('joints', 'N/A')}")
            logger.info(f"   ‚Ä¢ √âmotions: {len(ecosystem_info.get('emotions', []))}")
            logger.info(
                f"   ‚Ä¢ Comportements: {len(ecosystem_info.get('behaviors', []))}"
            )
            logger.info(
                f"   ‚Ä¢ Backends: {', '.join(ecosystem_info.get('backends', []))}"
            )

        # Ex√©cution du mode sp√©cifi√©
        success = False
        if mode == "simulation":
            success = await self.demo_mode_simulation()
        elif mode == "robot_real":
            success = await self.demo_mode_robot_real()
        elif mode == "mixed":
            success = await self.demo_mode_mixed()
        else:
            logger.error(f"‚ùå Mode '{mode}' non reconnu")
            return False

        # R√©sum√© final
        logger.info("\n" + "=" * 80)
        logger.info("üéâ D√âMONSTRATION TERMIN√âE")
        logger.info("=" * 80)
        if success:
            logger.info("‚úÖ D√©monstration r√©ussie")
            logger.info(f"üéÆ Mode: {mode}")
            logger.info("üåê L'√©cosyst√®me BBIA-SIM est pr√™t pour l'int√©gration")
            logger.info("üìö Consultez la documentation pour plus de d√©tails")
        else:
            logger.warning("‚ö†Ô∏è D√©monstration partiellement r√©ussie")
            logger.warning("üîß V√©rifiez la configuration et les logs")

        logger.info(f"üïê Fin: {time.strftime('%Y-%m-%d %H:%M:%S')}")

        return success

    async def close(self):
        """Ferme le client HTTP."""
        await self.client.aclose()


async def main():
    """Point d'entr√©e principal."""
    parser = argparse.ArgumentParser(
        description="üéÆ Mode d√©monstration complet BBIA-SIM Phase 3",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation :

  # D√©monstration simulation (recommand√©e)
  python scripts/demo_mode_complete.py --mode simulation

  # D√©monstration robot r√©el (n√©cessite robot physique)
  python scripts/demo_mode_complete.py --mode robot_real

  # D√©monstration mode mixte (simulation + robot r√©el)
  python scripts/demo_mode_complete.py --mode mixed

  # D√©monstration avec logs d√©taill√©s
  python scripts/demo_mode_complete.py --mode simulation --log-level debug
        """,
    )

    parser.add_argument(
        "--mode",
        choices=["simulation", "robot_real", "mixed"],
        default="simulation",
        help="Mode de d√©monstration (d√©faut: simulation)",
    )
    parser.add_argument(
        "--url",
        default="http://localhost:8000",
        help="URL de base de l'API (d√©faut: http://localhost:8000)",
    )
    parser.add_argument(
        "--log-level",
        choices=["debug", "info", "warning", "error"],
        default="info",
        help="Niveau de log (d√©faut: info)",
    )

    args = parser.parse_args()

    # Configuration du logging
    logging.getLogger().setLevel(getattr(logging, args.log_level.upper()))

    # Cr√©ation de la d√©monstration
    demo = BBIADemoMode(args.url)

    try:
        # Ex√©cution de la d√©monstration
        success = await demo.run_demo_mode(args.mode)

        # Code de sortie
        sys.exit(0 if success else 1)
    finally:
        await demo.close()


if __name__ == "__main__":
    asyncio.run(main())
