#!/usr/bin/env python3
"""
üß™ TEST CONFORMIT√â SDK OFFICIEL REACHY-MINI
Validation compl√®te de la conformit√© avec le SDK officiel reachy_mini
Bas√© sur les sp√©cifications officielles de Pollen Robotics (d√©cembre 2024)
"""

import sys
import time
from pathlib import Path

# Ajouter le chemin src au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from bbia_sim.robot_api import RobotFactory


def test_sdk_availability():
    """Test la disponibilit√© du SDK officiel."""
    print("üîç Test disponibilit√© SDK officiel...")

    try:
        from reachy_mini import ReachyMini

        print("‚úÖ Module reachy_mini import√© avec succ√®s")
        print("‚úÖ Classe ReachyMini disponible")

        # V√©rifier que la classe existe et ses m√©thodes principales
        # (Ce sont des m√©thodes d'instance, pas du module)
        instance_methods = [
            "wake_up",
            "goto_sleep",
            "get_current_joint_positions",
            "set_target_head_pose",
            "set_target_body_yaw",
            "look_at_world",
            "get_current_head_pose",
            "look_at_image",
            "goto_target",
            "enable_motors",
            "disable_motors",
        ]

        print("\nüìã M√©thodes d'instance ReachyMini:")
        all_available = True
        for method in instance_methods:
            if hasattr(ReachyMini, method):
                print(f"   ‚úÖ {method}")
            else:
                print(f"   ‚ùå {method} (manquante)")
                all_available = False

        # V√©rifier les utilitaires du module
        try:
            from reachy_mini import utils

            _ = utils  # Rendre l'import utilis√©
            print("\n‚úÖ Utilitaires SDK disponibles: reachy_mini.utils")
        except ImportError:
            print("\n‚ö†Ô∏è  Utilitaires SDK partiellement disponibles")

        return all_available

    except ImportError as e:
        print(f"‚ùå SDK officiel non disponible: {e}")
        print("üí° Installez avec: pip install reachy-mini")
        return False


def test_backend_conformity():
    """Test la conformit√© du backend avec le SDK officiel."""
    print("\nüß™ Test conformit√© backend...")

    try:
        # Cr√©er le backend
        robot = RobotFactory.create_backend("reachy_mini")
        print("‚úÖ Backend reachy_mini cr√©√©")

        # Test des joints disponibles
        joints = robot.get_available_joints()
        expected_joints = {
            "yaw_body",
            "stewart_1",
            "stewart_2",
            "stewart_3",
            "stewart_4",
            "stewart_5",
            "stewart_6",
            "left_antenna",
            "right_antenna",
        }

        if set(joints) == expected_joints:
            print("‚úÖ Joints conformes au SDK officiel")
        else:
            print(f"‚ùå Joints non conformes: {set(joints) - expected_joints}")

        # Test des m√©thodes API
        robot.is_connected = True  # Mode simulation

        # Test √©motions
        emotions = ["happy", "sad", "neutral", "excited", "curious", "calm"]
        for emotion in emotions:
            success = robot.set_emotion(emotion, 0.5)
            if not success:
                print(f"‚ùå √âmotion {emotion} √©chou√©e")
                return False
        print("‚úÖ Toutes les √©motions fonctionnent")

        # Test mouvements
        test_joints = ["yaw_body", "stewart_1", "stewart_2"]
        for joint in test_joints:
            success = robot.set_joint_pos(joint, 0.1)
            if not success:
                print(f"‚ùå Mouvement {joint} √©chou√©")
                return False
        print("‚úÖ Tous les mouvements fonctionnent")

        # Test look_at
        success = robot.look_at(0.1, 0.2, 0.3)
        if not success:
            print("‚ùå Look_at √©chou√©")
            return False
        print("‚úÖ Look_at fonctionne")

        # Test comportements
        behaviors = ["wake_up", "goto_sleep", "nod"]
        for behavior in behaviors:
            success = robot.run_behavior(behavior, 1.0)
            if not success:
                print(f"‚ùå Comportement {behavior} √©chou√©")
                return False
        print("‚úÖ Tous les comportements fonctionnent")

        return True

    except Exception as e:
        print(f"‚ùå Erreur conformit√© backend: {e}")
        return False


def test_api_compatibility():
    """Test la compatibilit√© avec l'API officielle."""
    print("\nüîå Test compatibilit√© API...")

    try:
        robot = RobotFactory.create_backend("reachy_mini")
        robot.is_connected = True

        # Test t√©l√©m√©trie
        telemetry = robot.get_telemetry()
        required_fields = [
            "step_count",
            "elapsed_time",
            "current_emotion",
            "is_connected",
        ]

        for field in required_fields:
            if field not in telemetry:
                print(f"‚ùå Champ t√©l√©m√©trie {field} manquant")
                return False
        print("‚úÖ T√©l√©m√©trie conforme")

        # Test limites de s√©curit√©
        if hasattr(robot, "safe_amplitude_limit"):
            limit = robot.safe_amplitude_limit
            if limit <= 0.3:  # Limite recommand√©e
                print(f"‚úÖ Limite amplitude s√©curis√©e: {limit}")
            else:
                print(f"‚ö†Ô∏è Limite amplitude √©lev√©e: {limit}")
        else:
            print("‚ùå Limite amplitude non d√©finie")
            return False

        return True

    except Exception as e:
        print(f"‚ùå Erreur compatibilit√© API: {e}")
        return False


def test_performance():
    """Test les performances du backend."""
    print("\n‚ö° Test performances...")

    try:
        robot = RobotFactory.create_backend("reachy_mini")
        robot.is_connected = True

        # Test latence
        start_time = time.time()
        for _ in range(100):
            robot.set_joint_pos("yaw_body", 0.1)
            robot.get_joint_pos("yaw_body")
        end_time = time.time()

        avg_latency = (end_time - start_time) / 100 * 1000  # ms
        print(f"üìä Latence moyenne: {avg_latency:.2f}ms")

        if avg_latency < 10:  # < 10ms acceptable
            print("‚úÖ Performances excellentes")
        elif avg_latency < 50:  # < 50ms acceptable
            print("‚úÖ Performances bonnes")
        else:
            print("‚ö†Ô∏è Performances √† am√©liorer")

        return True

    except Exception as e:
        print(f"‚ùå Erreur test performances: {e}")
        return False


def main():
    """Point d'entr√©e principal."""
    print("üß™ TEST CONFORMIT√â SDK OFFICIEL REACHY-MINI")
    print("=" * 60)
    print("üìÖ Bas√© sur les sp√©cifications officielles (d√©cembre 2024)")
    print("=" * 60)

    tests = [
        ("Disponibilit√© SDK", test_sdk_availability),
        ("Conformit√© Backend", test_backend_conformity),
        ("Compatibilit√© API", test_api_compatibility),
        ("Performances", test_performance),
    ]

    passed = 0
    total = len(tests)

    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name}: PASS√â")
            else:
                print(f"‚ùå {test_name}: √âCHOU√â")
        except Exception as e:
            print(f"‚ùå {test_name}: ERREUR - {e}")

    print(f"\n{'='*60}")
    print("üìä R√âSULTATS FINAUX")
    print(f"Tests pass√©s: {passed}/{total} ({passed/total:.1%})")

    if passed == total:
        print("üéâ CONFORMIT√â 100% AVEC LE SDK OFFICIEL !")
        print("‚úÖ Votre projet est pr√™t pour le robot Reachy-Mini")
    else:
        print("‚ö†Ô∏è Des ajustements sont n√©cessaires")
        print("‚ùå V√©rifiez les erreurs ci-dessus")

    print("\nüöÄ Prochaines √©tapes:")
    print("1. Installer le SDK officiel: pip install reachy-mini")
    print("2. Tester avec robot physique")
    print("3. D√©velopper nouveaux comportements")
    print("4. Int√©grer mod√®les Hugging Face")


if __name__ == "__main__":
    main()
