#!/usr/bin/env python3
"""
Script de validation du mod√®le Reachy Mini parfaitement assembl√©.
V√©rifie les dimensions, l'assemblage et les articulations.
"""

import mujoco
import numpy as np
import sys
import os


def validate_perfect_assembled_model():
    """Valide le mod√®le reachy_mini_perfect_assembled.xml"""

    model_path = "/Volumes/T7/bbia-reachy-sim/src/bbia_sim/sim/models/reachy_mini_perfect_assembled.xml"

    print("üîç Validation du mod√®le Reachy Mini parfaitement assembl√©")
    print("=" * 60)

    try:
        # Chargement du mod√®le
        model = mujoco.MjModel.from_xml_path(model_path)
        data = mujoco.MjData(model)

        print(f"‚úÖ Mod√®le charg√© avec succ√®s")
        print(f"üìÅ Fichier : {model_path}")

        # Informations g√©n√©rales
        print(f"\nüìä Informations g√©n√©rales :")
        print(f"   ‚Ä¢ Nombre de corps : {model.nbody}")
        print(f"   ‚Ä¢ Nombre d'articulations : {model.njnt}")
        print(f"   ‚Ä¢ Nombre de g√©om√©tries : {model.ngeom}")
        print(f"   ‚Ä¢ Nombre de moteurs : {model.nu}")

        # V√©rification des dimensions
        print(f"\nüìè V√©rification des dimensions :")

        # Position de la base
        base_id = mujoco.mj_name2id(model, mujoco.mjtObj.mjOBJ_BODY, "base")
        base_pos = model.body_pos[base_id]
        print(
            f"   ‚Ä¢ Position base : ({base_pos[0]:.3f}, {base_pos[1]:.3f}, {base_pos[2]:.3f})"
        )

        # Position de la t√™te
        head_id = mujoco.mj_name2id(model, mujoco.mjtObj.mjOBJ_BODY, "head")
        head_pos = model.body_pos[head_id]
        print(
            f"   ‚Ä¢ Position t√™te : ({head_pos[0]:.3f}, {head_pos[1]:.3f}, {head_pos[2]:.3f})"
        )

        # Hauteur totale du robot
        height = head_pos[2] - base_pos[2] + 0.5  # +50cm pour la base
        print(f"   ‚Ä¢ Hauteur totale : {height:.3f}m")

        # Largeur du robot (distance entre les bras)
        right_arm_id = mujoco.mj_name2id(model, mujoco.mjtObj.mjOBJ_BODY, "right_arm")
        left_arm_id = mujoco.mj_name2id(model, mujoco.mjtObj.mjOBJ_BODY, "left_arm")
        right_arm_pos = model.body_pos[right_arm_id]
        left_arm_pos = model.body_pos[left_arm_id]
        width = abs(left_arm_pos[1] - right_arm_pos[1])
        print(f"   ‚Ä¢ Largeur totale : {width:.3f}m")

        # Validation des dimensions
        print(f"\n‚úÖ Validation des dimensions :")
        if 0.4 <= height <= 0.7:
            print(f"   ‚úÖ Hauteur OK ({height:.3f}m) - Dans la plage 0.4-0.7m")
        else:
            print(f"   ‚ùå Hauteur NOK ({height:.3f}m) - Hors plage 0.4-0.7m")

        if 0.2 <= width <= 0.4:
            print(f"   ‚úÖ Largeur OK ({width:.3f}m) - Dans la plage 0.2-0.4m")
        else:
            print(f"   ‚ùå Largeur NOK ({width:.3f}m) - Hors plage 0.2-0.4m")

        # V√©rification de l'assemblage
        print(f"\nüîß V√©rification de l'assemblage :")

        # V√©rifier que tous les corps sont bien connect√©s
        bodies_to_check = [
            "base",
            "torso",
            "head",
            "right_arm",
            "left_arm",
            "right_forearm",
            "left_forearm",
            "right_gripper",
            "left_gripper",
        ]
        assembly_ok = True

        for body_name in bodies_to_check:
            try:
                body_id = mujoco.mj_name2id(model, mujoco.mjtObj.mjOBJ_BODY, body_name)
                body_pos = model.body_pos[body_id]
                print(
                    f"   ‚úÖ {body_name} : ({body_pos[0]:.3f}, {body_pos[1]:.3f}, {body_pos[2]:.3f})"
                )
            except:
                print(f"   ‚ùå {body_name} : Corps non trouv√©")
                assembly_ok = False

        # V√©rification des articulations
        print(f"\nü§ñ V√©rification des articulations :")
        expected_joints = [
            "neck_yaw",
            "neck_pitch",
            "neck_roll",
            "right_shoulder_pitch",
            "right_shoulder_roll",
            "right_elbow_pitch",
            "right_wrist_pitch",
            "right_wrist_roll",
            "right_gripper_joint",
            "left_shoulder_pitch",
            "left_shoulder_roll",
            "left_elbow_pitch",
            "left_wrist_pitch",
            "left_wrist_roll",
            "left_gripper_joint",
        ]

        joints_found = 0
        for joint_name in expected_joints:
            try:
                joint_id = mujoco.mj_name2id(
                    model, mujoco.mjtObj.mjOBJ_JOINT, joint_name
                )
                joint_range = model.jnt_range[joint_id]
                print(
                    f"   ‚úÖ {joint_name} : [{joint_range[0]:.2f}, {joint_range[1]:.2f}] rad"
                )
                joints_found += 1
            except:
                print(f"   ‚ùå {joint_name} : Articulation non trouv√©e")

        # Score de fid√©lit√©
        print(f"\nüéØ Score de fid√©lit√© :")
        height_score = 1 if 0.4 <= height <= 0.7 else 0
        width_score = 1 if 0.2 <= width <= 0.4 else 0
        joints_score = 1 if joints_found == 15 else 0
        assembly_score = 1 if assembly_ok else 0

        total_score = height_score + width_score + joints_score + assembly_score
        print(f"   ‚Ä¢ Dimensions : {height_score + width_score}/2")
        print(f"   ‚Ä¢ Articulations : {joints_score}/1")
        print(f"   ‚Ä¢ Assemblage : {assembly_score}/1")
        print(f"   ‚Ä¢ Score total : {total_score}/4")

        if total_score == 4:
            print(f"\nüéâ MOD√àLE PARFAIT ! Toutes les v√©rifications sont OK")
            return True
        else:
            print(f"\n‚ö†Ô∏è  Mod√®le √† am√©liorer. Score : {total_score}/4")
            return False

    except Exception as e:
        print(f"‚ùå Erreur lors de la validation : {e}")
        return False


if __name__ == "__main__":
    success = validate_perfect_assembled_model()
    sys.exit(0 if success else 1)
