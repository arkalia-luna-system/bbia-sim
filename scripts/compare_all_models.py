#!/usr/bin/env python3
"""
Script de comparaison compl√®te des mod√®les Reachy Mini
Compare les diff√©rents mod√®les pour identifier le meilleur assemblage
"""

import argparse
import logging
import sys
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def main():
    parser = argparse.ArgumentParser(
        description="Comparateur complet de mod√®les Reachy Mini"
    )
    parser.add_argument("--headless", action="store_true", help="Mode headless")
    parser.add_argument("--duration", type=int, default=2, help="Dur√©e en secondes")

    args = parser.parse_args()

    # Chemin vers les mod√®les
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    models_dir = project_root / "src" / "bbia_sim" / "sim" / "models"

    models = [
        ("reachy_mini.xml", "Mod√®le original (pi√®ces d√©tach√©es)"),
        ("reachy_mini_complete.xml", "Mod√®le complet (assemblage basique)"),
        ("reachy_mini_assembled.xml", "Mod√®le assembl√© (positions corrig√©es)"),
        ("reachy_mini_scaled.xml", "Mod√®le √† l'√©chelle (dimensions r√©alistes)"),
    ]

    logger.info("üîç COMPARAISON COMPL√àTE DES MOD√àLES REACHY MINI")
    logger.info("=" * 70)

    try:
        import mujoco

        results = []

        for model_file, description in models:
            model_path = models_dir / model_file

            if not model_path.exists():
                logger.warning(f"‚ö†Ô∏è Mod√®le non trouv√© : {model_file}")
                continue

            logger.info(f"\nüì¶ Test du mod√®le : {model_file}")
            logger.info(f"üìù Description : {description}")

            try:
                # Chargement du mod√®le
                model = mujoco.MjModel.from_xml_path(str(model_path))
                data = mujoco.MjData(model)

                # Informations du mod√®le
                joints = [model.joint(i).name for i in range(model.njnt)]
                geoms = [model.geom(i).name for i in range(model.ngeom)]
                bodies = [model.body(i).name for i in range(model.nbody)]

                logger.info(
                    f"‚úÖ Mod√®le charg√© : {len(joints)} joints, {len(geoms)} geoms, {len(bodies)} bodies"
                )

                # Test de simulation
                if args.headless:
                    logger.info(f"üîÑ Test simulation ({args.duration}s)...")
                    import time

                    start_time = time.monotonic()
                    step_count = 0
                    while time.monotonic() - start_time < args.duration:
                        mujoco.mj_step(model, data)
                        step_count += 1
                    final_time = time.monotonic() - start_time

                    logger.info(f"   ‚úÖ {step_count} steps en {final_time:.2f}s")

                    results.append(
                        {
                            "file": model_file,
                            "description": description,
                            "joints": len(joints),
                            "geoms": len(geoms),
                            "bodies": len(bodies),
                            "steps": step_count,
                            "time": final_time,
                            "performance": step_count / final_time,
                        }
                    )
                else:
                    results.append(
                        {
                            "file": model_file,
                            "description": description,
                            "joints": len(joints),
                            "geoms": len(geoms),
                            "bodies": len(bodies),
                            "steps": 0,
                            "time": 0,
                            "performance": 0,
                        }
                    )

            except Exception as e:
                logger.error(f"‚ùå Erreur avec {model_file}: {e}")
                results.append(
                    {
                        "file": model_file,
                        "description": description,
                        "joints": 0,
                        "geoms": 0,
                        "bodies": 0,
                        "steps": 0,
                        "time": 0,
                        "performance": 0,
                        "error": str(e),
                    }
                )

        # R√©sum√© des r√©sultats
        logger.info("\nüéØ R√âSUM√â COMPARATIF:")
        logger.info("=" * 70)
        logger.info(
            f"{'Mod√®le':<25} | {'Joints':<6} | {'Geoms':<6} | {'Bodies':<6} | {'Performance':<12}"
        )
        logger.info("-" * 70)

        for result in results:
            if "error" in result:
                logger.info(
                    f"{result['file']:<25} | {'ERROR':<6} | {'ERROR':<6} | {'ERROR':<6} | {'ERROR':<12}"
                )
            else:
                perf_str = (
                    f"{result['performance']:.0f} steps/s"
                    if result["performance"] > 0
                    else "N/A"
                )
                logger.info(
                    f"{result['file']:<25} | {result['joints']:<6} | {result['geoms']:<6} | {result['bodies']:<6} | {perf_str:<12}"
                )

        # Recommandation
        logger.info("\nüí° RECOMMANDATION:")
        logger.info("=" * 70)

        if results:
            # Trouver le meilleur mod√®le (plus de joints, bonne performance)
            best_model = max(
                results, key=lambda x: x["joints"] if "error" not in x else 0
            )

            if "error" not in best_model:
                logger.info(f"üèÜ Meilleur mod√®le : {best_model['file']}")
                logger.info(f"üìù Description : {best_model['description']}")
                logger.info(f"‚úÖ Articulations : {best_model['joints']}")
                logger.info(f"üé® G√©om√©tries : {best_model['geoms']}")
                logger.info(f"üèóÔ∏è Corps : {best_model['bodies']}")

                if best_model["performance"] > 0:
                    logger.info(
                        f"‚ö° Performance : {best_model['performance']:.0f} steps/s"
                    )

                logger.info("\nüöÄ Pour lancer le meilleur mod√®le :")
                logger.info("   ./launch_robot.sh")
                logger.info("   # ou")
                logger.info(
                    f"   python scripts/launch_complete_robot.py --model {best_model['file']}"
                )
            else:
                logger.error("‚ùå Aucun mod√®le fonctionnel trouv√©")

    except ImportError as e:
        logger.error(f"‚ùå MuJoCo non disponible : {e}")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå Erreur : {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
