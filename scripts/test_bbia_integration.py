#!/usr/bin/env python3
"""
Test d'int√©gration BBIA ‚Üî Robot Reachy Mini
D√©monstration compl√®te de l'int√©gration entre les modules BBIA et le simulateur
"""

import asyncio
import sys
from pathlib import Path

# Ajouter le chemin du module parent
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.bbia_sim.bbia_integration import create_bbia_integration


async def test_emotion_mapping():
    """Test du mapping √©motions ‚Üí articulations."""

    print("üé≠ Test du mapping √©motions ‚Üí articulations")
    print("=" * 50)

    # Cr√©er l'int√©gration BBIA
    integration = await create_bbia_integration(
        "src/bbia_sim/sim/models/reachy_mini_REAL_OFFICIAL.xml"
    )

    # Liste des √©motions √† tester
    emotions_to_test = [
        "neutral",
        "happy",
        "sad",
        "angry",
        "surprised",
        "curious",
        "excited",
        "fearful",
    ]

    for emotion in emotions_to_test:
        print(f"\nüé≠ Test √©motion : {emotion}")

        # Appliquer l'√©motion avec diff√©rentes intensit√©s
        for intensity in [0.3, 0.6, 0.9]:
            print(f"   Intensit√© : {intensity}")
            success = await integration.apply_emotion_to_robot(emotion, intensity)

            if success:
                print(f"   ‚úÖ √âmotion '{emotion}' appliqu√©e (intensit√©: {intensity})")
            else:
                print(f"   ‚ùå √âchec application √©motion '{emotion}'")

            # Pause pour observer le mouvement
            await asyncio.sleep(1.0)

    # Retour √† l'√©tat neutre
    await integration.apply_emotion_to_robot("neutral", 0.5)
    print("\n‚úÖ Test mapping √©motions termin√©")


async def test_vision_reactions():
    """Test des r√©actions visuelles."""

    print("\nüëÅÔ∏è Test des r√©actions visuelles")
    print("=" * 50)

    # Cr√©er l'int√©gration BBIA
    integration = await create_bbia_integration(
        "src/bbia_sim/sim/models/reachy_mini_REAL_OFFICIAL.xml"
    )

    # Simulation de d√©tection de visage
    face_detection = {
        "faces": [
            {"position": (0.3, 0.1), "confidence": 0.9},
            {"position": (-0.2, 0.2), "confidence": 0.8},
        ]
    }

    print("üë§ Simulation d√©tection de visage...")
    success = await integration.react_to_vision_detection(face_detection)

    if success:
        print("‚úÖ R√©action √† la d√©tection de visage r√©ussie")
    else:
        print("‚ùå √âchec r√©action visuelle")

    await asyncio.sleep(2.0)

    # Simulation de d√©tection d'objet
    object_detection = {
        "objects": [
            {"name": "bottle", "position": (0.1, 0.0), "confidence": 0.85},
            {"name": "cup", "position": (-0.3, 0.1), "confidence": 0.7},
        ]
    }

    print("üì¶ Simulation d√©tection d'objet...")
    success = await integration.react_to_vision_detection(object_detection)

    if success:
        print("‚úÖ R√©action √† la d√©tection d'objet r√©ussie")
    else:
        print("‚ùå √âchec r√©action visuelle")

    await asyncio.sleep(2.0)

    print("‚úÖ Test r√©actions visuelles termin√©")


async def test_voice_synchronization():
    """Test de la synchronisation voix ‚Üî mouvements."""

    print("\nüó£Ô∏è Test synchronisation voix ‚Üî mouvements")
    print("=" * 50)

    # Cr√©er l'int√©gration BBIA
    integration = await create_bbia_integration(
        "src/bbia_sim/sim/models/reachy_mini_REAL_OFFICIAL.xml"
    )

    # Test avec diff√©rentes √©motions
    test_phrases = [
        ("Bonjour, je suis BBIA !", "happy"),
        ("Je suis triste aujourd'hui...", "sad"),
        ("Je suis tr√®s surpris !", "surprised"),
        ("Je suis curieux de vous conna√Ætre.", "curious"),
    ]

    for text, emotion in test_phrases:
        print(f"\nüó£Ô∏è Phrase : '{text}' (√©motion: {emotion})")

        success = await integration.sync_voice_with_movements(text, emotion)

        if success:
            print("‚úÖ Synchronisation voix + mouvements r√©ussie")
        else:
            print("‚ùå √âchec synchronisation voix")

        await asyncio.sleep(1.0)

    print("‚úÖ Test synchronisation voix termin√©")


async def test_behavior_sequences():
    """Test des s√©quences de comportement."""

    print("\nüé¨ Test s√©quences de comportement")
    print("=" * 50)

    # Cr√©er l'int√©gration BBIA
    integration = await create_bbia_integration(
        "src/bbia_sim/sim/models/reachy_mini_REAL_OFFICIAL.xml"
    )

    # Test des comportements disponibles
    behaviors_to_test = ["greeting", "hide", "antenna_animation"]

    for behavior in behaviors_to_test:
        print(f"\nüé¨ Test comportement : {behavior}")

        success = await integration.execute_behavior_sequence(behavior)

        if success:
            print(f"‚úÖ S√©quence '{behavior}' ex√©cut√©e avec succ√®s")
        else:
            print(f"‚ùå √âchec ex√©cution comportement '{behavior}'")

        await asyncio.sleep(2.0)

    print("‚úÖ Test s√©quences comportement termin√©")


async def test_integration_status():
    """Test du statut de l'int√©gration."""

    print("\nüìä Test statut int√©gration")
    print("=" * 50)

    # Cr√©er l'int√©gration BBIA
    integration = await create_bbia_integration(
        "src/bbia_sim/sim/models/reachy_mini_REAL_OFFICIAL.xml"
    )

    # R√©cup√©rer le statut
    status = integration.get_integration_status()

    print("üìä Statut de l'int√©gration BBIA :")
    print(f"   ‚Ä¢ Active : {status['is_active']}")
    print(f"   ‚Ä¢ √âmotion actuelle : {status['current_emotion']}")
    print(f"   ‚Ä¢ Intensit√© : {status['emotion_intensity']}")
    print(f"   ‚Ä¢ Simulation pr√™te : {status['simulation_ready']}")
    print(f"   ‚Ä¢ √âmotions disponibles : {len(status['available_emotions'])}")

    print("‚úÖ Test statut int√©gration termin√©")


async def main():
    """Fonction principale de test d'int√©gration."""

    print("üöÄ TEST D'INT√âGRATION BBIA ‚Üî ROBOT REACHY MINI")
    print("=" * 60)
    print("Ce test d√©montre l'int√©gration compl√®te entre les modules BBIA")
    print("et le simulateur MuJoCo du robot Reachy Mini.")
    print("=" * 60)

    try:
        # Tests s√©quentiels
        await test_emotion_mapping()
        await test_vision_reactions()
        await test_voice_synchronization()
        await test_behavior_sequences()
        await test_integration_status()

        print("\n" + "=" * 60)
        print("üéâ TOUS LES TESTS D'INT√âGRATION R√âUSSIS !")
        print("‚úÖ L'int√©gration BBIA ‚Üî Robot fonctionne parfaitement")
        print("=" * 60)

    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests d'int√©gration : {e}")
        return 1

    return 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
