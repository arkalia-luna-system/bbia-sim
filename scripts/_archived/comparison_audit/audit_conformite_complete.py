#!/usr/bin/env python3
"""
Script d'audit de conformit√© complet entre BBIA-SIM et le SDK officiel Reachy Mini.
Compare tous les endpoints, classes, m√©thodes, mod√®les, tests, etc.
"""

import logging
import re
import subprocess
import sys
from dataclasses import dataclass, field
from pathlib import Path
from typing import Any

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

PROJECT_ROOT = Path(__file__).parent.parent
BBIA_SRC = PROJECT_ROOT / "src" / "bbia_sim"
BBIA_TESTS = PROJECT_ROOT / "tests"
BBIA_SCRIPTS = PROJECT_ROOT / "scripts"
BBIA_ASSETS = PROJECT_ROOT / "assets"


@dataclass
class ConformityIssue:
    """Une incoh√©rence de conformit√© d√©tect√©e."""

    category: str  # API, BEHAVIOR, MODELS, TESTS, etc.
    severity: str  # STRICT, COMPATIBLE, INCOMPATIBLE
    file: str
    line: int | None = None
    endpoint: str | None = None
    description: str = ""
    bbia_implementation: str = ""
    official_sdk: str = ""
    fix_suggestion: str = ""
    proof_link: str = ""


@dataclass
class ConformityReport:
    """Rapport de conformit√© complet."""

    issues: list[ConformityIssue] = field(default_factory=list)
    summary: dict[str, Any] = field(default_factory=dict)

    def add_issue(self, issue: ConformityIssue) -> None:
        """Ajoute une incoh√©rence au rapport."""
        self.issues.append(issue)

    def get_summary(self) -> dict[str, Any]:
        """G√©n√®re un r√©sum√© du rapport."""
        total = len(self.issues)
        by_severity = {}
        by_category = {}

        for issue in self.issues:
            by_severity[issue.severity] = by_severity.get(issue.severity, 0) + 1
            by_category[issue.category] = by_category.get(issue.category, 0) + 1

        return {
            "total_issues": total,
            "by_severity": by_severity,
            "by_category": by_category,
            "strict_conformity": by_severity.get("STRICT", 0),
            "compatible": by_severity.get("COMPATIBLE", 0),
            "incompatible": by_severity.get("INCOMPATIBLE", 0),
        }


class ConformityAuditor:
    """Auditeur de conformit√© pour BBIA-SIM vs SDK officiel."""

    def __init__(self):
        self.report = ConformityReport()
        self.bbia_endpoints: list[dict[str, Any]] = []
        self.sdk_methods: dict[str, Any] = {}

    def discover_bbia_endpoints(self) -> list[dict[str, Any]]:
        """D√©couvre tous les endpoints REST de BBIA."""
        endpoints = []

        # Chercher dans tous les routers
        routers_dir = BBIA_SRC / "daemon" / "app" / "routers"
        if not routers_dir.exists():
            logger.warning(f"Routers dir not found: {routers_dir}")
            return endpoints

        for router_file in routers_dir.glob("*.py"):
            if router_file.name.startswith("._") or router_file.name == "__init__.py":
                continue

            try:
                endpoints.extend(self._parse_router_file(router_file))
            except Exception as e:
                logger.warning(f"Error parsing {router_file}: {e}")

        return endpoints

    def _parse_router_file(self, router_file: Path) -> list[dict[str, Any]]:
        """Parse un fichier router pour extraire les endpoints."""
        endpoints = []

        try:
            with open(router_file, encoding="utf-8") as f:
                content = f.read()

            # Chercher les d√©corateurs @router.get, @router.post, etc.
            pattern = r'@router\.(get|post|put|delete|patch)\s*\(\s*["\']([^"\']+)["\']'
            matches = re.finditer(pattern, content)

            for match in matches:
                method = match.group(1).upper()
                path = match.group(2)

                # Extraire la fonction suivante
                func_start = content.find("\n", match.end())
                func_match = re.search(
                    r"def\s+(\w+)\s*\(", content[func_start : func_start + 500]
                )
                func_name = func_match.group(1) if func_match else "unknown"

                endpoints.append(
                    {
                        "method": method,
                        "path": path,
                        "function": func_name,
                        "file": str(router_file.relative_to(PROJECT_ROOT)),
                    }
                )
        except Exception as e:
            logger.error(f"Error parsing router {router_file}: {e}")

        return endpoints

    def check_sdk_availability(self) -> dict[str, Any]:
        """V√©rifie la disponibilit√© du SDK officiel."""
        try:
            import reachy_mini
            from reachy_mini import ReachyMini

            # Extraire les m√©thodes de la classe ReachyMini
            methods = {}
            for name in dir(ReachyMini):
                if not name.startswith("_"):
                    obj = getattr(ReachyMini, name)
                    if callable(obj):
                        try:
                            sig = inspect.signature(obj)
                            methods[name] = {
                                "signature": str(sig),
                                "doc": obj.__doc__ or "",
                            }
                        except Exception:
                            methods[name] = {"signature": "unknown", "doc": ""}

            return {
                "available": True,
                "version": getattr(reachy_mini, "__version__", "unknown"),
                "methods": methods,
            }
        except ImportError:
            return {"available": False, "error": "SDK not installed"}
        except Exception as e:
            return {"available": False, "error": str(e)}

    def compare_api_endpoints(self) -> None:
        """Compare les endpoints REST avec le SDK."""
        logger.info("üîç Comparaison des endpoints REST...")

        bbia_endpoints = self.discover_bbia_endpoints()
        self.bbia_endpoints = bbia_endpoints

        # Mapping des endpoints BBIA vers m√©thodes SDK
        # Ce mapping sera compl√©t√© avec les informations du SDK officiel
        endpoint_mapping = {
            "/api/move/goto": "goto_target",
            "/api/move/set_target": "set_target",
            "/api/state/present_head_pose": "get_current_head_pose",
            "/api/state/present_body_yaw": "get_current_body_yaw",
            "/api/state/present_antenna_joint_positions": (
                "get_present_antenna_joint_positions"
            ),
            "/api/move/play/wake_up": "wake_up",
            "/api/move/play/goto_sleep": "goto_sleep",
        }

        # V√©rifier que tous les endpoints critiques existent
        critical_endpoints = [
            ("/api/move/goto", "POST"),
            ("/api/move/set_target", "POST"),
            ("/api/state/full", "GET"),
            ("/api/state/joints", "GET"),
            ("/api/motors/set_mode/{mode}", "POST"),
        ]

        for endpoint_path, method in critical_endpoints:
            found = any(
                ep["path"] == endpoint_path and ep["method"] == method
                for ep in bbia_endpoints
            )
            if not found:
                self.report.add_issue(
                    ConformityIssue(
                        category="API",
                        severity="INCOMPATIBLE",
                        file="routers/",
                        endpoint=f"{method} {endpoint_path}",
                        description=f"Endpoint critique manquant: {method} {endpoint_path}",
                        fix_suggestion=f"Ajouter l'endpoint {method} {endpoint_path} dans le router appropri√©",
                    )
                )

    def check_code_quality(self) -> None:
        """V√©rifie la qualit√© du code avec black, ruff, mypy, bandit."""
        logger.info("üîç V√©rification qualit√© de code...")

        # V√©rifier black
        try:
            result = subprocess.run(
                ["black", "--check", "--diff", str(BBIA_SRC)],
                capture_output=True,
                text=True,
                timeout=30,
            )
            if result.returncode != 0:
                self.report.add_issue(
                    ConformityIssue(
                        category="QUALITY",
                        severity="COMPATIBLE",
                        file="src/bbia_sim/",
                        description="Code non format√© avec black",
                        fix_suggestion="Ex√©cuter: black src/bbia_sim/",
                    )
                )
        except Exception as e:
            logger.warning(f"Black check failed: {e}")

        # V√©rifier ruff
        try:
            result = subprocess.run(
                ["ruff", "check", str(BBIA_SRC)],
                capture_output=True,
                text=True,
                timeout=30,
            )
            if result.returncode != 0 and result.stdout:
                lines = result.stdout.split("\n")[:10]  # Limiter √† 10 erreurs
                self.report.add_issue(
                    ConformityIssue(
                        category="QUALITY",
                        severity="COMPATIBLE",
                        file="src/bbia_sim/",
                        description=f"Erreurs ruff d√©tect√©es: {len(lines)}",
                        fix_suggestion="Ex√©cuter: ruff check src/bbia_sim/ --fix",
                    )
                )
        except Exception as e:
            logger.warning(f"Ruff check failed: {e}")

    def generate_report(self) -> str:
        """G√©n√®re un rapport markdown."""
        summary = self.report.get_summary()

        report_lines = [
            "# Rapport d'Audit de Conformit√© BBIA-SIM vs SDK Officiel Reachy Mini",
            "",
            f"**Date:** {subprocess.check_output(['date'], text=True).strip()}",
            f"**Total incoh√©rences:** {summary['total_issues']}",
            "",
            "## R√©sum√©",
            "",
            f"- **STRICT (identique):** {summary['strict_conformity']}",
            f"- **COMPATIBLE (diff√©rent mais accept√©):** {summary['compatible']}",
            f"- **INCOMPATIBLE (erreur probable):** {summary['incompatible']}",
            "",
            "## Incoh√©rences D√©tect√©es",
            "",
        ]

        # Grouper par cat√©gorie
        by_category = {}
        for issue in self.report.issues:
            if issue.category not in by_category:
                by_category[issue.category] = []
            by_category[issue.category].append(issue)

        for category, issues in sorted(by_category.items()):
            report_lines.append(f"### {category} ({len(issues)} issues)")
            report_lines.append("")

            for issue in issues:
                report_lines.append(
                    f"#### {issue.severity}: {issue.endpoint or issue.description}"
                )
                report_lines.append(f"- **Fichier:** `{issue.file}`")
                if issue.line:
                    report_lines.append(f"- **Ligne:** {issue.line}")
                report_lines.append(f"- **Description:** {issue.description}")
                if issue.fix_suggestion:
                    report_lines.append(f"- **Correction:** {issue.fix_suggestion}")
                report_lines.append("")

        # Checklist finale
        report_lines.extend(
            [
                "## Checklist Actionable",
                "",
                "### √Ä Corriger (INCOMPATIBLE)",
                "",
            ]
        )

        incompatible = [i for i in self.report.issues if i.severity == "INCOMPATIBLE"]
        for idx, issue in enumerate(incompatible, 1):
            report_lines.append(
                f"{idx}. [ ] {issue.description} - `{issue.file}`:{issue.line or '?'}"
            )

        return "\n".join(report_lines)

    def run_full_audit(self) -> None:
        """Ex√©cute l'audit complet."""
        logger.info("üöÄ D√©marrage de l'audit de conformit√© complet...")

        # 1. Comparer les endpoints API
        self.compare_api_endpoints()

        # 2. V√©rifier la qualit√© du code
        self.check_code_quality()

        # 3. V√©rifier la disponibilit√© du SDK
        sdk_info = self.check_sdk_availability()
        logger.info(f"SDK disponible: {sdk_info.get('available', False)}")

        logger.info("‚úÖ Audit termin√©")


def main():
    """Point d'entr√©e principal."""
    auditor = ConformityAuditor()
    auditor.run_full_audit()

    # G√©n√©rer le rapport
    report = auditor.generate_report()

    # Sauvegarder le rapport
    report_file = PROJECT_ROOT / "docs" / "conformite" / "AUDIT_CONFORMITE_COMPLETE.md"
    report_file.parent.mkdir(parents=True, exist_ok=True)

    with open(report_file, "w", encoding="utf-8") as f:
        f.write(report)

    print("\n" + "=" * 80)
    print(report)
    print("=" * 80)
    print(f"\nüìÑ Rapport sauvegard√©: {report_file}")

    summary = auditor.report.get_summary()
    if summary["incompatible"] > 0:
        print(f"\n‚ö†Ô∏è  {summary['incompatible']} incoh√©rences INCOMPATIBLES d√©tect√©es!")
        sys.exit(1)
    else:
        print("\n‚úÖ Aucune incoh√©rence INCOMPATIBLE d√©tect√©e!")
        sys.exit(0)


if __name__ == "__main__":
    import inspect

    main()
