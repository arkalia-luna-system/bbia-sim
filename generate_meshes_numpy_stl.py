#!/usr/bin/env python3
"""
G√©n√©rateur de meshes STL avec numpy-stl pour Reachy Mini.
Version finale avec des meshes STL valides pour MuJoCo.
"""

import numpy as np
from stl import mesh
import os

def create_box_stl(filename, size):
    """Cr√©e un mesh STL de bo√Æte."""
    w, h, d = size
    
    # D√©finir les 8 sommets de la bo√Æte
    vertices = np.array([
        [-w/2, -h/2, -d/2],  # 0
        [ w/2, -h/2, -d/2],  # 1
        [ w/2,  h/2, -d/2],  # 2
        [-w/2,  h/2, -d/2],  # 3
        [-w/2, -h/2,  d/2],  # 4
        [ w/2, -h/2,  d/2],  # 5
        [ w/2,  h/2,  d/2],  # 6
        [-w/2,  h/2,  d/2],  # 7
    ])
    
    # D√©finir les 12 triangles (2 par face)
    faces = np.array([
        # Face avant (z-)
        [0, 1, 2], [0, 2, 3],
        # Face arri√®re (z+)
        [4, 6, 5], [4, 7, 6],
        # Face gauche (x-)
        [0, 3, 7], [0, 7, 4],
        # Face droite (x+)
        [1, 5, 6], [1, 6, 2],
        # Face bas (y-)
        [0, 4, 5], [0, 5, 1],
        # Face haut (y+)
        [3, 2, 6], [3, 6, 7],
    ])
    
    # Cr√©er le mesh
    box_mesh = mesh.Mesh(np.zeros(faces.shape[0], dtype=mesh.Mesh.dtype))
    for i, face in enumerate(faces):
        for j in range(3):
            box_mesh.vectors[i][j] = vertices[face[j], :]
    
    # Sauvegarder
    box_mesh.save(filename)

def create_sphere_stl(filename, radius, resolution=8):
    """Cr√©e un mesh STL de sph√®re."""
    # G√©n√©rer les sommets
    vertices = []
    faces = []
    
    # P√¥les
    vertices.append([0, 0, radius])   # P√¥le nord
    vertices.append([0, 0, -radius])  # P√¥le sud
    
    # Cercles interm√©diaires
    for i in range(1, resolution):
        phi = np.pi * i / resolution
        for j in range(resolution):
            theta = 2 * np.pi * j / resolution
            x = radius * np.sin(phi) * np.cos(theta)
            y = radius * np.sin(phi) * np.sin(theta)
            z = radius * np.cos(phi)
            vertices.append([x, y, z])
    
    vertices = np.array(vertices)
    
    # G√©n√©rer les faces
    # Faces autour du p√¥le nord
    for j in range(resolution):
        next_j = (j + 1) % resolution
        faces.append([0, 2 + j, 2 + next_j])
    
    # Faces autour du p√¥le sud
    for j in range(resolution):
        next_j = (j + 1) % resolution
        last_circle_start = 2 + (resolution - 2) * resolution
        faces.append([1, last_circle_start + next_j, last_circle_start + j])
    
    # Faces interm√©diaires
    for i in range(resolution - 2):
        for j in range(resolution):
            next_j = (j + 1) % resolution
            
            v1 = 2 + i * resolution + j
            v2 = 2 + i * resolution + next_j
            v3 = 2 + (i + 1) * resolution + next_j
            v4 = 2 + (i + 1) * resolution + j
            
            faces.append([v1, v2, v3])
            faces.append([v1, v3, v4])
    
    faces = np.array(faces)
    
    # Cr√©er le mesh
    sphere_mesh = mesh.Mesh(np.zeros(faces.shape[0], dtype=mesh.Mesh.dtype))
    for i, face in enumerate(faces):
        for j in range(3):
            sphere_mesh.vectors[i][j] = vertices[face[j], :]
    
    # Sauvegarder
    sphere_mesh.save(filename)

def main():
    """G√©n√®re tous les meshes STL pour Reachy Mini."""
    output_dir = "/Volumes/T7/bbia-reachy-sim/src/bbia_sim/sim/assets/meshes"
    
    print("üé® G√©n√©ration des meshes STL avec numpy-stl...")
    
    # 1. Torse (bo√Æte)
    print("  üì¶ G√©n√©ration du torse...")
    create_box_stl(os.path.join(output_dir, "torso.stl"), [0.2, 0.2, 0.4])
    
    # 2. T√™te (sph√®re)
    print("  üß† G√©n√©ration de la t√™te...")
    create_sphere_stl(os.path.join(output_dir, "head.stl"), 0.08, resolution=6)
    
    # 3. Bras sup√©rieur (bo√Æte allong√©e)
    print("  üí™ G√©n√©ration du bras sup√©rieur...")
    create_box_stl(os.path.join(output_dir, "upper_arm.stl"), [0.06, 0.06, 0.15])
    
    # 4. Avant-bras (bo√Æte allong√©e plus fine)
    print("  ü§≤ G√©n√©ration de l'avant-bras...")
    create_box_stl(os.path.join(output_dir, "forearm.stl"), [0.05, 0.05, 0.15])
    
    # 5. Pince (petite bo√Æte)
    print("  ‚úã G√©n√©ration de la pince...")
    create_box_stl(os.path.join(output_dir, "gripper.stl"), [0.04, 0.02, 0.02])
    
    print("‚úÖ G√©n√©ration termin√©e !")
    print(f"üìÅ Meshes STL cr√©√©s dans : {output_dir}")

if __name__ == "__main__":
    main()
