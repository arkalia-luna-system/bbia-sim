#!/usr/bin/env python3
"""
Exemple d'int√©gration des modules BBIA Phase 2
D√©monstration des nouvelles fonctionnalit√©s : Hugging Face, Emotion Recognition, Adaptive Behavior
"""

import sys
import time
from pathlib import Path

# Ajouter le chemin src au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from bbia_sim.bbia_huggingface import BBIAHuggingFace
from bbia_sim.bbia_emotion_recognition import BBIAEmotionRecognition
from bbia_sim.bbia_adaptive_behavior import BBIAAdaptiveBehavior
from bbia_sim.robot_factory import RobotFactory


def demo_huggingface_integration():
    """D√©monstration de l'int√©gration Hugging Face."""
    print("ü§ó === D√âMONSTRATION HUGGING FACE INTEGRATION ===")
    
    try:
        # Initialisation
        hf = BBIAHuggingFace()
        print(f"‚úÖ BBIA Hugging Face initialis√© (device: {hf.device})")
        
        # Affichage des mod√®les disponibles
        print("\nüìã Mod√®les disponibles:")
        models = hf.get_available_models()
        for category, model_list in models.items():
            print(f"  {category}: {list(model_list.keys())}")
        
        # Test analyse sentiment
        print("\nüìù Test analyse sentiment...")
        sentiment_result = hf.analyze_sentiment("Je suis tr√®s heureux de travailler sur ce projet!")
        print(f"R√©sultat: {sentiment_result}")
        
        # Test analyse √©motion
        print("\nüòä Test analyse √©motion...")
        emotion_result = hf.analyze_emotion("Je suis excit√© par les nouvelles fonctionnalit√©s!")
        print(f"R√©sultat: {emotion_result}")
        
        print("‚úÖ D√©monstration Hugging Face termin√©e\n")
        
    except ImportError as e:
        print(f"‚ùå Hugging Face non disponible: {e}")
        print("Installez avec: pip install transformers torch")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")


def demo_emotion_recognition():
    """D√©monstration de la reconnaissance d'√©motions."""
    print("üòä === D√âMONSTRATION EMOTION RECOGNITION ===")
    
    try:
        # Initialisation
        emotion_rec = BBIAEmotionRecognition()
        print(f"‚úÖ BBIA Emotion Recognition initialis√© (device: {emotion_rec.device})")
        
        # Initialisation des mod√®les
        print("\nüöÄ Initialisation des mod√®les...")
        success = emotion_rec.initialize()
        print(f"R√©sultat: {'‚úÖ' if success else '‚ùå'}")
        
        # Test analyse √©motion vocale
        print("\nüó£Ô∏è Test analyse √©motion vocale...")
        vocal_result = emotion_rec.analyze_vocal_emotion("Je suis vraiment excit√© par ce projet!")
        print(f"R√©sultat: {vocal_result}")
        
        # Test analyse √©motion faciale (simulation)
        print("\nüòä Test analyse √©motion faciale...")
        import numpy as np
        test_image = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
        facial_result = emotion_rec.analyze_facial_emotion(test_image)
        print(f"R√©sultat: {facial_result}")
        
        # Test fusion d'√©motions
        print("\nüîÑ Test fusion d'√©motions...")
        fusion_result = emotion_rec.fuse_emotions(facial_result, vocal_result)
        print(f"R√©sultat: {fusion_result}")
        
        # Test analyse temps r√©el
        print("\n‚è±Ô∏è Test analyse temps r√©el...")
        realtime_result = emotion_rec.analyze_emotion_realtime(test_image, "Je suis tr√®s heureux!")
        print(f"R√©sultat: {realtime_result}")
        
        # Statistiques
        print(f"\nüìä Statistiques: {emotion_rec.get_emotion_statistics()}")
        
        print("‚úÖ D√©monstration Emotion Recognition termin√©e\n")
        
    except ImportError as e:
        print(f"‚ùå D√©pendances ML non disponibles: {e}")
        print("Installez avec: pip install mediapipe torch transformers")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")


def demo_adaptive_behavior():
    """D√©monstration des comportements adaptatifs."""
    print("üß† === D√âMONSTRATION ADAPTIVE BEHAVIOR ===")
    
    try:
        # Initialisation
        adaptive_behavior = BBIAAdaptiveBehavior()
        print("‚úÖ BBIA Adaptive Behavior initialis√©")
        
        # Configuration d'un contexte
        print("\nüé≠ Configuration contexte 'greeting'...")
        adaptive_behavior.set_context("greeting", 0.9)
        adaptive_behavior.set_emotion_state("happy", 0.8)
        
        # G√©n√©ration de comportements
        print("\nüé≠ G√©n√©ration de comportements...")
        for i in range(3):
            behavior = adaptive_behavior.generate_behavior(f"user_arrival_{i}")
            print(f"  Comportement {i+1}: {behavior['name']} - {behavior['description']}")
            print(f"    Contexte: {behavior['context']}, √âmotion: {behavior['emotion']}")
            print(f"    Intensit√©: {behavior['emotion_intensity']:.2f}")
            print(f"    Param√®tres: {behavior['parameters']['duration']:.1f}s, {len(behavior['parameters']['joints'])} joints")
        
        # Test comportement proactif
        print("\nüöÄ Test comportement proactif...")
        proactive = adaptive_behavior.get_proactive_behavior()
        if proactive:
            print(f"Comportement proactif: {proactive['name']} - {proactive['description']}")
        else:
            print("Aucun comportement proactif g√©n√©r√©")
        
        # Test adaptation feedback
        print("\nüîÑ Test adaptation feedback...")
        behaviors = adaptive_behavior.behavior_history
        if behaviors:
            behavior_id = behaviors[0]["id"]
            adaptive_behavior.adapt_to_feedback(behavior_id, "positive", 0.8)
            print("Feedback positif appliqu√©")
        
        # Statistiques
        print(f"\nüìä Statistiques: {adaptive_behavior.get_behavior_statistics()}")
        
        print("‚úÖ D√©monstration Adaptive Behavior termin√©e\n")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")


def demo_integrated_workflow():
    """D√©monstration du workflow int√©gr√©."""
    print("üîÑ === D√âMONSTRATION WORKFLOW INT√âGR√â ===")
    
    try:
        # Initialisation des modules
        print("üöÄ Initialisation des modules...")
        
        # Hugging Face (optionnel)
        hf = None
        try:
            hf = BBIAHuggingFace()
            print("‚úÖ Hugging Face initialis√©")
        except ImportError:
            print("‚ö†Ô∏è Hugging Face non disponible")
        
        # Emotion Recognition
        emotion_rec = BBIAEmotionRecognition()
        emotion_rec.initialize()
        print("‚úÖ Emotion Recognition initialis√©")
        
        # Adaptive Behavior
        adaptive_behavior = BBIAAdaptiveBehavior()
        print("‚úÖ Adaptive Behavior initialis√©")
        
        # Robot Backend
        robot = RobotFactory.create_backend("mujoco")
        if robot and robot.connect():
            print("‚úÖ Robot MuJoCo connect√©")
        else:
            print("‚ö†Ô∏è Robot non connect√©")
        
        # Simulation d'interaction
        print("\nüé≠ Simulation d'interaction utilisateur...")
        
        # √âtape 1: Analyse √©motionnelle
        print("\n1Ô∏è‚É£ Analyse √©motionnelle...")
        user_text = "Bonjour! Je suis tr√®s heureux de vous rencontrer!"
        
        # Analyse avec Hugging Face si disponible
        if hf:
            sentiment = hf.analyze_sentiment(user_text)
            emotion = hf.analyze_emotion(user_text)
            print(f"   Sentiment: {sentiment}")
            print(f"   √âmotion: {emotion}")
        
        # Analyse avec Emotion Recognition
        vocal_emotion = emotion_rec.analyze_vocal_emotion(user_text)
        print(f"   √âmotion vocale: {vocal_emotion}")
        
        # √âtape 2: Adaptation du contexte
        print("\n2Ô∏è‚É£ Adaptation du contexte...")
        detected_emotion = vocal_emotion.get("emotion", "neutral")
        emotion_intensity = vocal_emotion.get("confidence", 0.5)
        
        # D√©termination du contexte
        if detected_emotion == "happy" and emotion_intensity > 0.7:
            context = "greeting"
        elif detected_emotion == "curious":
            context = "conversation"
        else:
            context = "neutral"
        
        adaptive_behavior.set_context(context)
        adaptive_behavior.set_emotion_state(detected_emotion, emotion_intensity)
        print(f"   Contexte: {context}")
        print(f"   √âmotion: {detected_emotion} (intensit√©: {emotion_intensity:.2f})")
        
        # √âtape 3: G√©n√©ration de comportement
        print("\n3Ô∏è‚É£ G√©n√©ration de comportement...")
        behavior = adaptive_behavior.generate_behavior("user_interaction")
        print(f"   Comportement: {behavior['name']}")
        print(f"   Description: {behavior['description']}")
        print(f"   Param√®tres: {behavior['parameters']}")
        
        # √âtape 4: Ex√©cution sur le robot
        print("\n4Ô∏è‚É£ Ex√©cution sur le robot...")
        if robot:
            # Simulation d'ex√©cution
            print(f"   Ex√©cution: {behavior['name']} pendant {behavior['parameters']['duration']:.1f}s")
            
            # Application de l'√©motion au robot
            robot.set_emotion(detected_emotion, emotion_intensity)
            print(f"   √âmotion appliqu√©e: {detected_emotion} (intensit√©: {emotion_intensity:.2f})")
            
            # Simulation de mouvement
            for joint in behavior['parameters']['joints']:
                if joint in robot.get_available_joints():
                    # Mouvement simul√©
                    print(f"   Mouvement joint {joint}: amplitude {behavior['parameters']['intensity']:.2f}")
        
        # √âtape 5: Apprentissage
        print("\n5Ô∏è‚É£ Apprentissage...")
        adaptive_behavior.adapt_to_feedback(behavior["id"], "positive", 0.8)
        print("   Feedback positif enregistr√©")
        
        # Statistiques finales
        print(f"\nüìä Statistiques finales:")
        print(f"   Comportements g√©n√©r√©s: {len(adaptive_behavior.behavior_history)}")
        print(f"   √âmotions analys√©es: {len(emotion_rec.emotion_history)}")
        
        print("‚úÖ Workflow int√©gr√© termin√© avec succ√®s\n")
        
    except Exception as e:
        print(f"‚ùå Erreur workflow int√©gr√©: {e}")


def main():
    """Point d'entr√©e principal."""
    print("üöÄ === D√âMONSTRATION BBIA PHASE 2 MODULES ===")
    print("Nouvelles fonctionnalit√©s: Hugging Face, Emotion Recognition, Adaptive Behavior")
    print("=" * 80)
    
    # D√©monstrations individuelles
    demo_huggingface_integration()
    demo_emotion_recognition()
    demo_adaptive_behavior()
    
    # D√©monstration int√©gr√©e
    demo_integrated_workflow()
    
    print("üéâ === D√âMONSTRATION TERMIN√âE ===")
    print("Tous les modules Phase 2 sont fonctionnels!")
    print("Pr√™t pour la Phase 3: Ouverture √âcosyst√®me")


if __name__ == "__main__":
    main()
