#!/usr/bin/env python3
"""
üéâ D√âMO REACHY-MINI CORRIG√âE - Utilise les vrais noms de joints
D√©monstration fonctionnelle avec les noms corrects du mod√®le MuJoCo
"""

import argparse
import sys
import time
from pathlib import Path

# Ajouter le chemin src au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from bbia_sim.mapping_reachy import ReachyMapping
from bbia_sim.robot_api import RobotFactory


def demo_reachy_mini_corrigee():
    """D√©mo compl√®te avec les noms de joints CORRECTS."""
    print("üéâ D√âMO REACHY-MINI CORRIG√âE - Noms de joints corrects !")
    print("=" * 60)
    print("‚úÖ Utilise les vrais noms du mod√®le MuJoCo officiel")
    print("=" * 60)

    # Cr√©er le robot MuJoCo
    print("\nüîß Initialisation MuJoCo...")
    robot_mujoco = RobotFactory.create_backend("mujoco")
    robot_mujoco.connect()
    print("‚úÖ Robot MuJoCo connect√©")

    # Cr√©er le robot SDK officiel
    print("\nüîß Initialisation SDK Officiel...")
    robot_officiel = RobotFactory.create_backend("reachy_mini")
    robot_officiel.is_connected = True  # Mode simulation
    print("‚úÖ Robot SDK Officiel connect√© (simulation)")

    mapping = ReachyMapping()

    print("\nüìä Comparaison Backends:")
    print(f"   MuJoCo: {len(robot_mujoco.get_available_joints())} joints")
    print(f"   SDK Officiel: {len(robot_officiel.get_available_joints())} joints")
    print(f"   Joints recommand√©s: {mapping.get_recommended_joints()}")

    # Afficher les vrais noms de joints
    print("\nüîç Vrais noms de joints MuJoCo:")
    mujoco_joints = robot_mujoco.get_available_joints()
    for i, joint in enumerate(mujoco_joints):
        print(f"   {i}: {joint}")

    # Animation avec les BONS noms de joints
    print("\nüé¨ D√âBUT DE L'ANIMATION CORRIG√âE !")
    print("=" * 50)

    # S√©quence 1: R√©veil du robot
    print("\nüåÖ S√©quence 1: R√©veil du Robot")
    robot_mujoco.run_behavior("wake_up", 3.0)
    robot_officiel.run_behavior("wake_up", 3.0)
    print("‚úÖ Robot r√©veill√© avec √©l√©gance")

    # S√©quence 2: √âmotions expressives (maintenant valides)
    print("\nüé≠ S√©quence 2: √âmotions Expressives")
    emotions = [
        ("happy", "üòä Heureux"),
        ("excited", "ü§© Excit√©"),
        ("curious", "ü§î Curieux"),
        ("sad", "üò¢ Triste"),
        ("neutral", "üòê Neutre"),
        ("calm", "üòå Calme"),
    ]

    # OPTIMISATION: Utiliser goto_target avec interpolation adapt√©e selon √©motion
    emotion_interpolation_map = {
        "happy": "cartoon",  # Expressif et anim√©
        "excited": "cartoon",  # Tr√®s expressif
        "curious": "minjerk",  # Naturel
        "sad": "ease_in_out",  # Doux et m√©lancolique
        "neutral": "minjerk",  # Naturel
        "calm": "ease_in_out",  # Doux et fluide
    }

    for emotion, emoji_desc in emotions:
        print(f"   {emoji_desc}")
        robot_mujoco.set_emotion(emotion, 0.8)

        # OPTIMISATION SDK: Utiliser goto_target avec interpolation adapt√©e si disponible
        interpolation_method = emotion_interpolation_map.get(emotion, "minjerk")
        if hasattr(robot_officiel, "goto_target") and hasattr(
            robot_officiel, "set_emotion"
        ):
            try:
                from reachy_mini.utils import create_head_pose

                # Cr√©er pose selon √©motion avec angles SDK conformes
                emotion_poses = {
                    "happy": create_head_pose(pitch=0.1, yaw=0.0),
                    "excited": create_head_pose(pitch=0.2, yaw=0.1),
                    "curious": create_head_pose(pitch=0.05, yaw=0.2),
                    "sad": create_head_pose(pitch=-0.1, yaw=0.0),
                    "neutral": create_head_pose(pitch=0.0, yaw=0.0),
                    "calm": create_head_pose(pitch=-0.05, yaw=0.0),
                }
                pose = emotion_poses.get(emotion, create_head_pose(pitch=0.0, yaw=0.0))
                robot_officiel.goto_target(
                    head=pose, duration=0.8, method=interpolation_method
                )
            except (ImportError, Exception):
                robot_officiel.set_emotion(emotion, 0.8)
        else:
            robot_officiel.set_emotion(emotion, 0.8)
        time.sleep(1.5)

    # S√©quence 3: Mouvements avec les BONS noms de joints
    # IMPORTANT EXPERT: Les joints stewart ne peuvent PAS √™tre contr√¥l√©s individuellement
    # car la plateforme Stewart utilise la cin√©matique inverse (IK).
    # Utiliser goto_target() ou set_target_head_pose() avec create_head_pose() pour la t√™te.
    print("\nüëÄ S√©quence 3: Mouvements avec M√©thodes SDK Correctes")

    # Mouvements t√™te via goto_target (conforme SDK officiel)
    try:
        from reachy_mini.utils import create_head_pose

        print("   üéØ Mouvements t√™te via goto_target (cin√©matique inverse)")
        head_poses = [
            (0.1, 0.0, "Regard droit"),
            (0.05, 0.15, "Regard √† droite"),
            (0.05, -0.15, "Regard √† gauche"),
            (0.0, 0.0, "Position neutre"),
        ]

        for pitch, yaw, description in head_poses:
            print(f"   {description} (pitch={pitch:.2f}, yaw={yaw:.2f})")
            pose = create_head_pose(pitch=pitch, yaw=yaw, degrees=False)

            if hasattr(robot_officiel, "goto_target"):
                # OPTIMISATION: Utiliser interpolation adapt√©e (minjerk pour mouvements naturels)
                robot_officiel.goto_target(head=pose, duration=0.8, method="minjerk")
            elif hasattr(robot_officiel, "set_target_head_pose"):
                robot_officiel.set_target_head_pose(pose)
            time.sleep(1.0)
    except ImportError:
        print("   ‚ö†Ô∏è  SDK reachy_mini non disponible, skip mouvements t√™te")

    # Mouvements corps via yaw_body (direct ou goto_target)
    print("\n   üéØ Mouvements corps (yaw_body)")
    body_movements = [
        (0.1, "Droit"),
        (0.15, "Droite"),
        (-0.15, "Gauche"),
        (0.0, "Centre"),
    ]

    for yaw, description in body_movements:
        print(f"   Rotation {description} (yaw={yaw:.2f})")
        # Utiliser goto_target si disponible (plus fluide)
        if hasattr(robot_officiel, "goto_target"):
            robot_officiel.goto_target(body_yaw=yaw, duration=0.6, method="minjerk")
        else:
            robot_officiel.set_joint_pos("yaw_body", yaw)
        time.sleep(0.7)

    # S√©quence 4: Look_at dynamique
    print("\nüëÅÔ∏è S√©quence 4: Look_at Dynamique")
    look_positions = [
        (0.2, 0.0, 0.3, "Regarde devant"),
        (0.0, 0.2, 0.3, "Regarde √† droite"),
        (-0.2, 0.0, 0.3, "Regarde derri√®re"),
        (0.0, -0.2, 0.3, "Regarde √† gauche"),
        (0.1, 0.1, 0.4, "Regarde en haut-droite"),
        (0.0, 0.0, 0.2, "Regarde au centre"),
    ]

    for x, y, z, description in look_positions:
        print(f"   {description} ({x}, {y}, {z})")
        # OPTIMISATION EXPERT: Utiliser look_at_world avec tous les param√®tres SDK
        # pour performance optimale (duration et perform_movement)
        if hasattr(robot_officiel, "look_at_world"):
            # Validation coordonn√©es avant appel (√©vite erreurs r√©seau)
            if -2.0 <= x <= 2.0 and -2.0 <= y <= 2.0 and -1.0 <= z <= 1.0:
                robot_officiel.look_at_world(
                    x, y, z, duration=1.0, perform_movement=True
                )
            else:
                print(f"   ‚ö†Ô∏è  Coordonn√©es hors limites: ({x}, {y}, {z})")
        else:
            robot_officiel.look_at(x, y, z)
        robot_mujoco.look_at(x, y, z)
        time.sleep(1.0)

    # S√©quence 5: Comportements sociaux (maintenant valides)
    print("\nü§ù S√©quence 5: Comportements Sociaux")
    behaviors = [
        ("nod", "Hochement de t√™te"),
        ("wake_up", "R√©veil expressif"),
        ("goto_sleep", "Endormissement"),
    ]

    for behavior, description in behaviors:
        print(f"   {description}")
        robot_mujoco.run_behavior(behavior, 2.0)
        robot_officiel.run_behavior(behavior, 2.0)
        time.sleep(1.0)

    # S√©quence 6: D√©monstration s√©curit√©
    print("\nüõ°Ô∏è S√©quence 6: D√©monstration S√©curit√©")
    print("   Test amplitude limite (0.3 rad)")

    # Test amplitude normale
    robot_mujoco.set_joint_pos("yaw_body", 0.2)
    robot_officiel.set_joint_pos("yaw_body", 0.2)
    print("   ‚úÖ Amplitude normale: OK")
    time.sleep(1.0)

    # Test amplitude excessive (doit √™tre clamp√©e)
    robot_mujoco.set_joint_pos("yaw_body", 0.5)  # > 0.3
    robot_officiel.set_joint_pos("yaw_body", 0.5)  # > 0.3
    print("   ‚úÖ Amplitude excessive: Clamp√©e automatiquement")
    time.sleep(1.0)

    # Test antenne animable (avec limites de s√©curit√©)
    success_mujoco = robot_mujoco.set_joint_pos("left_antenna", 0.1)  # Dans limites -0.3 √† 0.3
    success_officiel = robot_officiel.set_joint_pos("left_antenna", 0.1)
    print(f"   ‚úÖ Antenne animable (limites -0.3 √† 0.3 rad): MuJoCo={success_mujoco}, SDK={success_officiel}")

    # S√©quence 7: Finale spectaculaire
    print("\nüéÜ S√âQUENCE FINALE: SPECTACLE COMPLET !")
    print("=" * 40)

    # Mouvement de rotation compl√®te avec le BON nom
    print("   üå™Ô∏è Rotation compl√®te du corps")
    for i in range(50):
        angle = (i / 50.0) * 2 * 3.14159 - 3.14159  # -œÄ √† +œÄ
        robot_mujoco.set_joint_pos("yaw_body", angle * 0.1)  # Limit√© √† 0.1
        robot_officiel.set_joint_pos("yaw_body", angle * 0.1)
        time.sleep(0.05)

    # √âmotion finale
    print("   üéâ √âmotion finale: EXCITED !")
    robot_mujoco.set_emotion("excited", 1.0)
    robot_officiel.set_emotion("excited", 1.0)
    time.sleep(2.0)

    # Retour au neutre
    print("   üòå Retour au neutre")
    robot_mujoco.set_emotion("neutral", 0.5)
    robot_officiel.set_emotion("neutral", 0.5)
    robot_mujoco.set_joint_pos("yaw_body", 0.0)
    robot_officiel.set_joint_pos("yaw_body", 0.0)

    # T√©l√©m√©trie finale
    print("\nüìä T√âL√âM√âTRIE FINALE")
    print("=" * 30)

    telemetry_mujoco = robot_mujoco.get_telemetry()
    telemetry_officiel = robot_officiel.get_telemetry()

    print("MuJoCo:")
    for key, value in telemetry_mujoco.items():
        if key != "current_qpos":  # Trop long √† afficher
            print(f"   {key}: {value}")

    print("\nSDK Officiel:")
    for key, value in telemetry_officiel.items():
        print(f"   {key}: {value}")

    # D√©connexion
    print("\nüîå D√©connexion...")
    robot_mujoco.disconnect()
    robot_officiel.disconnect()

    print("\nüéâ D√âMO CORRIG√âE TERMIN√âE !")
    print("=" * 50)
    print("‚ú® Maintenant tout fonctionne parfaitement !")
    print("ü§ñ Noms de joints corrects = Mouvements visibles")
    print("üöÄ Pr√™t pour le robot physique dans 2 mois !")
    print("=" * 50)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="D√©mo Reachy-Mini Corrig√©e")
    parser.add_argument("--quick", action="store_true", help="Version rapide")

    args = parser.parse_args()

    demo_reachy_mini_corrigee()

    print("\nüöÄ Prochaines √©tapes:")
    print("1. Tester avec robot physique (dans 2 mois)")
    print("2. Optimiser performances IA")
    print("3. D√©velopper nouveaux comportements")
    print("4. Pr√©parer d√©mos professionnelles")
    print("\nüéâ Merci d'avoir regard√© la d√©mo corrig√©e !")
