#!/usr/bin/env python3
"""
D√©mo Viewer BBIA Corrig√©e - Script de d√©monstration 3D avec gestion des joints
Script de d√©monstration pour BBIA avec validation des joints et animation s√©curis√©e
"""

import argparse
import math
import sys
import time
from pathlib import Path

import mujoco

# Ajout du chemin src pour les imports
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from bbia_sim.bbia_emotions import BBIAEmotions


def analyze_joints(model):
    """Analyse tous les joints et les classe par s√©curit√©."""
    safe_joints = []
    problematic_joints = []
    blocked_joints = []

    for i in range(model.njnt):
        name = mujoco.mj_id2name(model, mujoco.mjtObj.mjOBJ_JOINT, i)
        joint_range = model.jnt_range[i]

        if joint_range[0] == joint_range[1]:  # Joint bloqu√©
            blocked_joints.append((name, joint_range))
        elif name == "yaw_body":  # Joint tr√®s s√ªr
            safe_joints.append((name, joint_range, "TR√àS S√õR"))
        elif "stewart" in name:  # Joints Stewart - risqu√©s
            range_size = joint_range[1] - joint_range[0]
            if range_size > 2.0:
                problematic_joints.append((name, joint_range, "PROBL√âMATIQUE"))
            else:
                safe_joints.append((name, joint_range, "S√õR"))
        else:
            safe_joints.append((name, joint_range, "S√õR"))

    return safe_joints, problematic_joints, blocked_joints


def list_joints(model_path):
    """Affiche la liste des joints class√©s par s√©curit√©."""
    try:
        model = mujoco.MjModel.from_xml_path(model_path)
        safe_joints, problematic_joints, blocked_joints = analyze_joints(model)

        print("üîç ANALYSE DES JOINTS BBIA")
        print("=" * 50)
        print(f"üìä Total joints: {model.njnt}")
        print(f"‚úÖ Joints s√ªrs: {len(safe_joints)}")
        print(f"‚ö†Ô∏è  Joints probl√©matiques: {len(problematic_joints)}")
        print(f"‚ùå Joints bloqu√©s: {len(blocked_joints)}")

        print(f"\n‚úÖ JOINTS S√õRS ({len(safe_joints)}):")
        for name, joint_range, reason in safe_joints:
            range_size = joint_range[1] - joint_range[0]
            print(
                f"   ‚Ä¢ {name:12} | [{joint_range[0]:6.3f}, {joint_range[1]:6.3f}] | {range_size:5.3f} rad | {reason}"
            )

        if problematic_joints:
            print(f"\n‚ö†Ô∏è  JOINTS PROBL√âMATIQUES ({len(problematic_joints)}):")
            for name, joint_range, reason in problematic_joints:
                range_size = joint_range[1] - joint_range[0]
                print(
                    f"   ‚Ä¢ {name:12} | [{joint_range[0]:6.3f}, {joint_range[1]:6.3f}] | {range_size:5.3f} rad | {reason}"
                )

        print(f"\n‚ùå JOINTS BLOQU√âS ({len(blocked_joints)}):")
        for name, joint_range in blocked_joints:
            print(
                f"   ‚Ä¢ {name:12} | [{joint_range[0]:6.3f}, {joint_range[1]:6.3f}] | BLOQU√â"
            )

        print("\nüéØ RECOMMANDATIONS:")
        print("   ‚Ä¢ Pour les d√©mos: Utilisez SEULEMENT les joints s√ªrs")
        print("   ‚Ä¢ Joint le plus s√ªr: yaw_body (rotation du corps)")
        print("   ‚Ä¢ √âvitez les joints probl√©matiques en production")

        return True

    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse des joints: {e}")
        return False


def validate_joint(model, joint_name):
    """Valide qu'un joint existe et est s√ªr."""
    safe_joints, problematic_joints, blocked_joints = analyze_joints(model)

    # V√©rifier si le joint existe
    joint_id = mujoco.mj_name2id(model, mujoco.mjtObj.mjOBJ_JOINT, joint_name)
    if joint_id == -1:
        print(f"‚ùå Joint '{joint_name}' non trouv√©")
        return False

    # V√©rifier si le joint est s√ªr
    safe_joint_names = [name for name, _, _ in safe_joints]
    if joint_name not in safe_joint_names:
        print(f"‚ùå Joint '{joint_name}' non s√ªr")
        return False

    return True


def clamp_amplitude(amplitude, max_amplitude=0.3):
    """Clamp l'amplitude pour la s√©curit√©."""
    if amplitude > max_amplitude:
        print(f"‚ö†Ô∏è  Amplitude {amplitude} trop √©lev√©e, ajust√©e √† {max_amplitude}")
        return max_amplitude
    return amplitude


def animate_joint(
    model, data, joint_name, duration, frequency=0.1, amplitude=0.2, headless=False
):
    """Anime un joint avec un mouvement sinuso√Ødal."""
    joint_id = mujoco.mj_name2id(model, mujoco.mjtObj.mjOBJ_JOINT, joint_name)
    joint_range = model.jnt_range[joint_id]

    # Clamp l'amplitude
    amplitude = clamp_amplitude(amplitude)

    print(f"üéÆ Animation du joint: {joint_name}")
    print(f"üìè Limites: [{joint_range[0]:6.3f}, {joint_range[1]:6.3f}] rad")
    print(f"üìä Fr√©quence: {frequency} Hz")
    print(f"üìä Amplitude: {amplitude} rad")
    print(f"‚è±Ô∏è  Dur√©e: {duration}s")
    print(f"üñ•Ô∏è  Mode: {'headless' if headless else 'graphique'}")

    # Initialiser BBIA √âmotions
    emotions = BBIAEmotions()
    print(f"üé≠ BBIA √âmotions: {len(emotions.emotions)} √©motions disponibles")

    # Configuration animation
    fps = 100
    total_steps = int(duration * fps)
    step_count = 0

    print("\nüöÄ D√©marrage animation...")
    start_time = time.time()

    try:
        for step in range(total_steps):
            # Calculer la position sinuso√Ødale
            t = step / total_steps
            position = amplitude * math.sin(2 * math.pi * frequency * t)

            # Appliquer la position au joint
            data.qpos[joint_id] = position

            # Step de simulation
            mujoco.mj_step(model, data)
            step_count += 1

            # Affichage p√©riodique
            if step % (fps // 2) == 0:  # Toutes les 0.5s
                elapsed = time.time() - start_time
                print(
                    f"‚è±Ô∏è  {elapsed:.1f}s | Position: {position:.3f} rad | steps: {step_count}"
                )

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Animation interrompue par l'utilisateur")

    end_time = time.time()
    actual_duration = end_time - start_time

    print("\n‚úÖ Animation termin√©e")
    print(f"üìä Dur√©e r√©elle: {actual_duration:.2f}s")
    print(f"üìä steps ex√©cut√©s: {step_count}")
    print(f"üìä Fr√©quence moyenne: {step_count/actual_duration:.1f} Hz")

    if headless:
        print(f"Animation headless termin√©e avec {step_count} steps")

    return True


def main():
    parser = argparse.ArgumentParser(description="D√©mo Viewer BBIA Corrig√©e")
    parser.add_argument(
        "--xml",
        default="src/bbia_sim/sim/models/reachy_mini_REAL_OFFICIAL.xml",
        help="Chemin vers le mod√®le XML",
    )
    parser.add_argument(
        "--list-joints", action="store_true", help="Lister tous les joints"
    )
    parser.add_argument("--headless", action="store_true", help="Mode headless")
    parser.add_argument("--duration", type=float, default=2.0, help="Dur√©e en secondes")
    parser.add_argument("--joint", default="yaw_body", help="Joint √† animer")
    parser.add_argument(
        "--frequency", type=float, default=0.1, help="Fr√©quence en Hz (S√âCURIS√â)"
    )
    parser.add_argument(
        "--amplitude", type=float, default=0.2, help="Amplitude en rad (S√âCURIS√â)"
    )

    args = parser.parse_args()

    # V√©rifier que le fichier XML existe
    if not Path(args.xml).exists():
        print(f"‚ùå Fichier XML introuvable: {args.xml}")
        return 1

    try:
        # Charger le mod√®le
        model = mujoco.MjModel.from_xml_path(args.xml)
        data = mujoco.MjData(model)
        print(f"‚úÖ Mod√®le charg√©: {model.njnt} joints d√©tect√©s")
    except Exception as e:
        print(f"‚ùå Erreur chargement mod√®le: {e}")
        return 1

    # Mode list-joints
    if args.list_joints:
        return 0 if list_joints(args.xml) else 1

    # Valider le joint
    if not validate_joint(model, args.joint):
        print("‚úÖ Joints s√ªrs disponibles:")
        safe_joints, _, _ = analyze_joints(model)
        for name, _, reason in safe_joints:
            print(f"  ‚Ä¢ {name} ({reason})")
        return 1

    # Lancer l'animation
    success = animate_joint(
        model,
        data,
        args.joint,
        args.duration,
        args.frequency,
        args.amplitude,
        args.headless,
    )

    return 0 if success else 1


if __name__ == "__main__":
    exit(main())
