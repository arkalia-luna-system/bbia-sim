#!/usr/bin/env python3
"""
Script pour visualiser une sc√®ne MuJoCo personnalis√©e.

Usage:
    python examples/view_scene_piece.py [chemin_vers_scene.xml]
    # Ou avec mjpython sur macOS:
    mjpython examples/view_scene_piece.py [chemin_vers_scene.xml]
"""

import logging
import sys
import time
from pathlib import Path

# Ajouter le r√©pertoire racine au path
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

try:
    import mujoco
    import mujoco.viewer
except ImportError:
    print("‚ùå Erreur : MuJoCo non disponible")
    print("üí° Installez : pip install mujoco")
    if sys.platform == "darwin":
        print("üí° Sur macOS, utilisez 'mjpython' au lieu de 'python'")
    sys.exit(1)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def main():
    """Charge et affiche une sc√®ne MuJoCo."""

    # Chemin vers la sc√®ne (argument ou d√©faut)
    if len(sys.argv) > 1:
        scene_path = Path(sys.argv[1])
        if not scene_path.is_absolute():
            scene_path = root_dir / scene_path
    else:
        # Sc√®ne par d√©faut : minimal.xml
        scene_path = root_dir / "src" / "bbia_sim" / "sim" / "scenes" / "minimal.xml"

    if not scene_path.exists():
        logger.error(f"‚ùå Sc√®ne non trouv√©e : {scene_path}")
        logger.info(
            "üí° Cr√©ez votre sc√®ne XML ou utilisez : python examples/view_scene_piece.py chemin/vers/scene.xml"
        )
        sys.exit(1)

    logger.info(f"üìÅ Chargement de la sc√®ne : {scene_path}")

    try:
        # Charger le mod√®le
        model = mujoco.MjModel.from_xml_path(str(scene_path))
        data = mujoco.MjData(model)

        logger.info("‚úÖ Sc√®ne charg√©e avec succ√®s")
        logger.info(f"ü§ñ Nombre d'objets g√©om√©triques : {model.ngeom}")

        logger.info("\nüéÆ Lancement du viewer MuJoCo...")
        logger.info("üí° Contr√¥les :")
        logger.info("   ‚Ä¢ Souris : Rotation de la vue")
        logger.info("   ‚Ä¢ Molette : Zoom")
        logger.info("   ‚Ä¢ Clic droit : D√©placer la vue")
        logger.info("   ‚Ä¢ √âchap : Fermer la fen√™tre")

        # Lancer le viewer
        with mujoco.viewer.launch_passive(model, data) as viewer:
            # Configurer la cam√©ra (ajustez selon votre sc√®ne)
            viewer.cam.azimuth = 180.0
            viewer.cam.elevation = -15.0
            viewer.cam.distance = 2.5
            viewer.cam.lookat[:] = [0.0, 0.0, 0.3]

            # Synchroniser imm√©diatement
            viewer.sync()
            time.sleep(0.2)

            logger.info("‚úÖ Fen√™tre 3D ouverte")

            # Boucle de simulation
            while viewer.is_running():
                mujoco.mj_step(model, data)
                viewer.sync()
                time.sleep(0.01)

    except mujoco.FatalError as e:
        logger.error(f"‚ùå Erreur MuJoCo : {e}")
        logger.info("üí° V√©rifiez que tous les fichiers r√©f√©renc√©s existent")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå Erreur : {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
